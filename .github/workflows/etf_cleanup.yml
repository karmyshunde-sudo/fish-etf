name: 清理数据文件任务-akshare信息
on:
  workflow_dispatch:
    inputs:
      task:
        description: '任务类型'
        required: true
        type: choice
        options:
          - 'show_akshare_info'
          - 'clean_stock_daily_data'
          - 'clean_daily_data'
          - 'clean_arbitrage_data'
          - 'clean_trade_records'
          - 'clean_numeric_csv'
      interface_name:
        description: 'AkShare接口名称（可选）'
        required: false
        type: string
        default: ''
jobs:
  # ========================
  # 显示AkShare信息
  # ========================
  show-akshare-info:
    name: 显示AkShare信息
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'show_akshare_info'
    permissions:
      contents: write
    steps:
      - name: 验证时区设置
        run: |
          echo "时区验证: $(date -u '+%Y-%m-%d %H:%M:%S' UTC) | $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S' CST)"
      
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 配置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: 安装依赖包
        run: |
          echo "当前工作目录: $(pwd)"
          if [ -f "requirements.txt" ]; then
            echo "✅ requirements.txt 文件存在，开始安装依赖..."
            pip install -r requirements.txt
          else
            echo "❌ 错误: requirements.txt 文件不存在"
            ls -la
            exit 1
          fi
      
      - name: 获取AkShare信息
        id: get_akshare_info
        run: |
          INTERFACE_NAME="${{ github.event.inputs.interface_name }}"
          echo "正在获取AkShare信息: ${INTERFACE_NAME:-默认接口}"
          
          # 执行获取信息
          python data_crawler/get_akshare_info.py ${INTERFACE_NAME:+$INTERFACE_NAME}
          
          # 检查执行结果
          if [ $? -eq 0 ]; then
            echo "task_status=success" >> $GITHUB_OUTPUT
            echo "任务成功执行"
          else
            echo "task_status=failed" >> $GITHUB_OUTPUT
            echo "任务执行失败"
            exit 1
          fi
      
      - name: 检查信息文件状态
        if: steps.get_akshare_info.outputs.task_status == 'success'
        run: |
          echo "检查 data/flags/ 目录状态（仅显示与AkShare信息相关的文件）:"
          ls -la data/flags/*.txt 2>/dev/null || echo "无AkShare信息文件"
          git status -- data/flags/*.txt
      
      - name: 提交信息文件
        if: steps.get_akshare_info.outputs.task_status == 'success'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # 检查是否有变化
          git add data/flags/*.txt
          if [ -n "$(git status --porcelain data/flags/*.txt)" ]; then
            echo "检测到AkShare信息文件变化，准备提交..."
            git commit -m "更新AkShare信息文件 [${{ github.event.inputs.interface_name }}]"
            git push origin main
            echo "commit_status=success" >> $GITHUB_OUTPUT
            echo "✅ 信息文件已成功提交到Git仓库"
          else
            echo "ℹ️ AkShare信息文件无变化，跳过提交"
            echo "commit_status=skipped" >> $GITHUB_OUTPUT
          fi
      
      - name: 发送完成通知
        if: steps.get_akshare_info.outputs.task_status == 'success' && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          COMMIT_STATUS=${{ steps.commit_info.outputs.commit_status }} || 'skipped'
          
          if [ "$COMMIT_STATUS" = "success" ]; then
            MSG="✅ 【AkShare信息】获取并提交成功"
          elif [ "$COMMIT_STATUS" = "skipped" ]; then
            MSG="ℹ️ 【AkShare信息】获取成功但无变化"
          else
            MSG="⚠️ 【AkShare信息】获取成功但提交失败"
          fi
          
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"$MSG\\n北京时间: ${BEIJING_TIME}\"}}"
      
      - name: 发送失败通知
        if: failure() && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"❌ 【AkShare信息】执行失败\\n北京时间: ${BEIJING_TIME}\"}}"

  # ========================
  # 清理任务 - 每个任务都有独立Job
  # ========================
  # 手动清理ETF日线数据
  manual-clean-daily-data:
    name: 手动清理ETF日线数据
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'clean_daily_data'
    permissions:
      contents: write
    steps:
      - name: 验证时区设置
        run: |
          echo "时区验证: $(date -u '+%Y-%m-%d %H:%M:%S' UTC) | $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S' CST)"
      
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 检查ETF日线数据目录
        id: check_dir
        run: |
          if [ -d "data/etf_daily" ] && [ -n "$(ls -A data/etf_daily)" ]; then
            echo "directory_exists=true" >> $GITHUB_OUTPUT
            echo "files_count=$(ls data/etf_daily/*.csv 2>/dev/null | wc -l)" >> $GITHUB_OUTPUT
          else
            echo "directory_exists=false" >> $GITHUB_OUTPUT
            echo "files_count=0" >> $GITHUB_OUTPUT
          fi
          echo "当前ETF日线数据目录状态: 存在=$(steps.check_dir.outputs.directory_exists), 文件数=$(steps.check_dir.outputs.files_count)"
      
      - name: 清理ETF日线数据
        id: clean_task
        if: steps.check_dir.outputs.directory_exists == 'true'
        run: |
          echo "删除 data/etf_daily/*.csv"
          rm -rf data/etf_daily/*.csv
          
          # 验证清理是否成功
          if [ ! -d "data/etf_daily" ] || [ -z "$(ls -A data/etf_daily 2>/dev/null)" ]; then
            echo "task_status=success" >> $GITHUB_OUTPUT
            echo "✅ ETF日线数据已成功清理"
          else
            echo "task_status=failed" >> $GITHUB_OUTPUT
            echo "❌ ETF日线数据清理失败"
            exit 1
          fi
      
      - name: 跳过空目录清理
        if: steps.check_dir.outputs.directory_exists == 'false'
        run: |
          echo "ℹ️ data/etf_daily 目录不存在或已为空，无需清理"
          echo "task_status=skipped" >> $GITHUB_OUTPUT
      
      - name: 检查文件状态（诊断）
        if: steps.clean_task.outputs.task_status == 'success' || steps.clean_task.conclusion == 'skipped'
        run: |
          echo "清理后 data/etf_daily/ 目录状态（仅显示ETF日线数据相关文件）:"
          ls -la data/etf_daily/ 2>/dev/null || echo "目录不存在或为空"
          git status -- data/etf_daily/
      
      - name: 提交清理变更
        if: steps.clean_task.outputs.task_status == 'success'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # 检查是否有变化
          git add data/etf_daily/
          if [ -n "$(git status --porcelain data/etf_daily/)" ]; then
            echo "检测到ETF日线数据变化，准备提交..."
            git commit -m "【手动清理】清除ETF日线数据文件"
            git push origin main
            echo "commit_status=success" >> $GITHUB_OUTPUT
            echo "✅ 文件已成功提交到Git仓库"
          else
            echo "ℹ️ ETF日线数据目录已为空，无需提交"
            echo "commit_status=skipped" >> $GITHUB_OUTPUT
          fi
      
      - name: 发送清理通知
        if: env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          CLEAN_STATUS=${{ steps.clean_task.outputs.task_status }} || 'failed'
          COMMIT_STATUS=${{ steps.commit_task.outputs.commit_status }} || 'n/a'
          
          if [ "$CLEAN_STATUS" = "success" ]; then
            if [ "$COMMIT_STATUS" = "success" ]; then
              MSG="✅ 【手动清理】ETF日线数据文件已清理并提交成功"
            elif [ "$COMMIT_STATUS" = "skipped" ]; then
              MSG="ℹ️ 【手动清理】ETF日线数据文件已清理但无变化"
            else
              MSG="⚠️ 【手动清理】ETF日线数据文件已清理但提交失败"
            fi
          elif [ "$CLEAN_STATUS" = "skipped" ]; then
            MSG="ℹ️ 【手动清理】ETF日线数据目录已为空，无需清理"
          else
            MSG="❌ 【手动清理】ETF日线数据文件清理失败"
          fi
          
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"$MSG\\n北京时间: ${BEIJING_TIME}\"}}"

  # 新增：手动清理股票日线数据
  manual-clean-stock-daily-data:
    name: 手动清理股票日线数据
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'clean_stock_daily_data'
    permissions:
      contents: write
    steps:
      - name: 验证时区设置
        run: |
          echo "时区验证: $(date -u '+%Y-%m-%d %H:%M:%S' UTC) | $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S' CST)"
      
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 检查股票日线数据目录
        id: check_dir
        run: |
          if [ -d "data/daily" ] && [ -n "$(ls -A data/daily)" ]; then
            echo "directory_exists=true" >> $GITHUB_OUTPUT
            echo "files_count=$(ls data/daily/*.csv 2>/dev/null | wc -l)" >> $GITHUB_OUTPUT
          else
            echo "directory_exists=false" >> $GITHUB_OUTPUT
            echo "files_count=0" >> $GITHUB_OUTPUT
          fi
          echo "当前股票日线数据目录状态: 存在=$(steps.check_dir.outputs.directory_exists), 文件数=$(steps.check_dir.outputs.files_count)"
      
      - name: 清理股票日线数据
        id: clean_task
        if: steps.check_dir.outputs.directory_exists == 'true'
        run: |
          echo "删除 data/daily/*.csv"
          rm -rf data/daily/*.csv
          
          # 验证清理是否成功
          if [ ! -d "data/daily" ] || [ -z "$(ls -A data/daily 2>/dev/null)" ]; then
            echo "task_status=success" >> $GITHUB_OUTPUT
            echo "✅ 股票日线数据已成功清理"
          else
            echo "task_status=failed" >> $GITHUB_OUTPUT
            echo "❌ 股票日线数据清理失败"
            exit 1
          fi
      
      - name: 跳过空目录清理
        if: steps.check_dir.outputs.directory_exists == 'false'
        run: |
          echo "ℹ️ data/daily 目录不存在或已为空，无需清理"
          echo "task_status=skipped" >> $GITHUB_OUTPUT
      
      - name: 检查文件状态（诊断）
        if: steps.clean_task.outputs.task_status == 'success' || steps.clean_task.conclusion == 'skipped'
        run: |
          echo "清理后 data/daily/ 目录状态（仅显示股票日线数据相关文件）:"
          ls -la data/daily/ 2>/dev/null || echo "目录不存在或为空"
          git status -- data/daily/
      
      - name: 提交清理变更
        if: steps.clean_task.outputs.task_status == 'success'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # 检查是否有变化
          git add data/daily/
          if [ -n "$(git status --porcelain data/daily/)" ]; then
            echo "检测到股票日线数据变化，准备提交..."
            git commit -m "【手动清理】清除股票日线数据文件"
            git push origin main
            echo "commit_status=success" >> $GITHUB_OUTPUT
            echo "✅ 文件已成功提交到Git仓库"
          else
            echo "ℹ️ 股票日线数据目录已为空，无需提交"
            echo "commit_status=skipped" >> $GITHUB_OUTPUT
          fi
      
      - name: 发送清理通知
        if: env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          CLEAN_STATUS=${{ steps.clean_task.outputs.task_status }} || 'failed'
          COMMIT_STATUS=${{ steps.commit_task.outputs.commit_status }} || 'n/a'
          
          if [ "$CLEAN_STATUS" = "success" ]; then
            if [ "$COMMIT_STATUS" = "success" ]; then
              MSG="✅ 【手动清理】股票日线数据文件已清理并提交成功"
            elif [ "$COMMIT_STATUS" = "skipped" ]; then
              MSG="ℹ️ 【手动清理】股票日线数据文件已清理但无变化"
            else
              MSG="⚠️ 【手动清理】股票日线数据文件已清理但提交失败"
            fi
          elif [ "$CLEAN_STATUS" = "skipped" ]; then
            MSG="ℹ️ 【手动清理】股票日线数据目录已为空，无需清理"
          else
            MSG="❌ 【手动清理】股票日线数据文件清理失败"
          fi
          
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"$MSG\\n北京时间: ${BEIJING_TIME}\"}}"

  # 手动清理ETF套利数据
  manual-clean-arbitrage-data:
    name: 手动清理ETF套利数据
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'clean_arbitrage_data'
    permissions:
      contents: write
    steps:
      - name: 验证时区设置
        run: |
          echo "时区验证: $(date -u '+%Y-%m-%d %H:%M:%S' UTC) | $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S' CST)"
      
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 检查ETF套利数据目录
        id: check_dir
        run: |
          if [ -d "data/arbitrage" ] && [ -n "$(ls -A data/arbitrage)" ]; then
            echo "directory_exists=true" >> $GITHUB_OUTPUT
            echo "files_count=$(ls data/arbitrage/*.csv 2>/dev/null | wc -l)" >> $GITHUB_OUTPUT
          else
            echo "directory_exists=false" >> $GITHUB_OUTPUT
            echo "files_count=0" >> $GITHUB_OUTPUT
          fi
          echo "当前ETF套利数据目录状态: 存在=$(steps.check_dir.outputs.directory_exists), 文件数=$(steps.check_dir.outputs.files_count)"
      
      - name: 清理ETF套利数据
        id: clean_task
        if: steps.check_dir.outputs.directory_exists == 'true'
        run: |
          echo "删除 data/arbitrage/*.csv"
          rm -rf data/arbitrage/*.csv
          
          # 验证清理是否成功
          if [ ! -d "data/arbitrage" ] || [ -z "$(ls -A data/arbitrage 2>/dev/null)" ]; then
            echo "task_status=success" >> $GITHUB_OUTPUT
            echo "✅ ETF套利数据已成功清理"
          else
            echo "task_status=failed" >> $GITHUB_OUTPUT
            echo "❌ ETF套利数据清理失败"
            exit 1
          fi
      
      - name: 跳过空目录清理
        if: steps.check_dir.outputs.directory_exists == 'false'
        run: |
          echo "ℹ️ data/arbitrage 目录不存在或已为空，无需清理"
          echo "task_status=skipped" >> $GITHUB_OUTPUT
      
      - name: 检查文件状态（诊断）
        if: steps.clean_task.outputs.task_status == 'success' || steps.clean_task.conclusion == 'skipped'
        run: |
          echo "清理后 data/arbitrage/ 目录状态（仅显示ETF套利数据相关文件）:"
          ls -la data/arbitrage/ 2>/dev/null || echo "目录不存在或为空"
          git status -- data/arbitrage/
      
      - name: 提交清理变更
        if: steps.clean_task.outputs.task_status == 'success'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # 检查是否有变化
          git add data/arbitrage/
          if [ -n "$(git status --porcelain data/arbitrage/)" ]; then
            echo "检测到ETF套利数据变化，准备提交..."
            git commit -m "【手动清理】清除ETF套利数据文件"
            git push origin main
            echo "commit_status=success" >> $GITHUB_OUTPUT
            echo "✅ 文件已成功提交到Git仓库"
          else
            echo "ℹ️ ETF套利数据目录已为空，无需提交"
            echo "commit_status=skipped" >> $GITHUB_OUTPUT
          fi
      
      - name: 发送清理通知
        if: env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          CLEAN_STATUS=${{ steps.clean_task.outputs.task_status }} || 'failed'
          COMMIT_STATUS=${{ steps.commit_task.outputs.commit_status }} || 'n/a'
          
          if [ "$CLEAN_STATUS" = "success" ]; then
            if [ "$COMMIT_STATUS" = "success" ]; then
              MSG="✅ 【手动清理】ETF套利数据文件已清理并提交成功"
            elif [ "$COMMIT_STATUS" = "skipped" ]; then
              MSG="ℹ️ 【手动清理】ETF套利数据文件已清理但无变化"
            else
              MSG="⚠️ 【手动清理】ETF套利数据文件已清理但提交失败"
            fi
          elif [ "$CLEAN_STATUS" = "skipped" ]; then
            MSG="ℹ️ 【手动清理】ETF套利数据目录已为空，无需清理"
          else
            MSG="❌ 【手动清理】ETF套利数据文件清理失败"
          fi
          
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"$MSG\\n北京时间: ${BEIJING_TIME}\"}}"

  # 手动清理ETF交易记录
  manual-clean-trade-records:
    name: 手动清理ETF交易记录
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'clean_trade_records'
    permissions:
      contents: write
    steps:
      - name: 验证时区设置
        run: |
          echo "时区验证: $(date -u '+%Y-%m-%d %H:%M:%S' UTC) | $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S' CST)"
      
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 检查ETF交易记录文件
        id: check_file
        run: |
          if [ -f "data/trade_records.csv" ]; then
            echo "file_exists=true" >> $GITHUB_OUTPUT
            echo "file_size=$(du -h data/trade_records.csv | cut -f1)" >> $GITHUB_OUTPUT
          else
            echo "file_exists=false" >> $GITHUB_OUTPUT
            echo "file_size=0" >> $GITHUB_OUTPUT
          fi
          echo "当前ETF交易记录文件状态: 存在=$(steps.check_file.outputs.file_exists), 大小=$(steps.check_file.outputs.file_size)"
      
      - name: 清理ETF交易记录
        id: clean_task
        if: steps.check_file.outputs.file_exists == 'true'
        run: |
          echo "删除 data/trade_records.csv"
          rm -f data/trade_records.csv
          
          # 验证清理是否成功
          if [ ! -f "data/trade_records.csv" ]; then
            echo "task_status=success" >> $GITHUB_OUTPUT
            echo "✅ ETF交易记录已成功清理"
          else
            echo "task_status=failed" >> $GITHUB_OUTPUT
            echo "❌ ETF交易记录清理失败"
            exit 1
          fi
      
      - name: 跳过无文件清理
        if: steps.check_file.outputs.file_exists == 'false'
        run: |
          echo "ℹ️ data/trade_records.csv 文件不存在，无需清理"
          echo "task_status=skipped" >> $GITHUB_OUTPUT
      
      - name: 检查文件状态（诊断）
        if: steps.clean_task.outputs.task_status == 'success' || steps.clean_task.conclusion == 'skipped'
        run: |
          echo "清理后 data/trade_records.csv 状态（仅显示交易记录相关文件）:"
          ls -la data/trade_records.csv 2>/dev/null || echo "文件不存在"
          git status -- data/trade_records.csv
      
      - name: 提交清理变更
        if: steps.clean_task.outputs.task_status == 'success'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # 检查是否有变化
          git add data/trade_records.csv
          if [ -n "$(git status --porcelain data/trade_records.csv)" ]; then
            echo "检测到ETF交易记录变化，准备提交..."
            git commit -m "【手动清理】清除ETF交易记录文件"
            git push origin main
            echo "commit_status=success" >> $GITHUB_OUTPUT
            echo "✅ 文件已成功提交到Git仓库"
          else
            echo "ℹ️ ETF交易记录文件已为空，无需提交"
            echo "commit_status=skipped" >> $GITHUB_OUTPUT
          fi
      
      - name: 发送清理通知
        if: env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          CLEAN_STATUS=${{ steps.clean_task.outputs.task_status }} || 'failed'
          COMMIT_STATUS=${{ steps.commit_task.outputs.commit_status }} || 'n/a'
          
          if [ "$CLEAN_STATUS" = "success" ]; then
            if [ "$COMMIT_STATUS" = "success" ]; then
              MSG="✅ 【手动清理】ETF交易记录文件已清理并提交成功"
            elif [ "$COMMIT_STATUS" = "skipped" ]; then
              MSG="ℹ️ 【手动清理】ETF交易记录文件已清理但无变化"
            else
              MSG="⚠️ 【手动清理】ETF交易记录文件已清理但提交失败"
            fi
          elif [ "$CLEAN_STATUS" = "skipped" ]; then
            MSG="ℹ️ 【手动清理】ETF交易记录文件不存在，无需清理"
          else
            MSG="❌ 【手动清理】ETF交易记录文件清理失败"
          fi
          
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"$MSG\\n北京时间: ${BEIJING_TIME}\"}}"

  # 手动清理纯数字CSV
  manual-clean-numeric-csv:
    name: 手动清理纯数字CSV
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'clean_numeric_csv'
    permissions:
      contents: write
    steps:
      - name: 验证时区设置
        run: |
          echo "时区验证: $(date -u '+%Y-%m-%d %H:%M:%S' UTC) | $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S' CST)"
      
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 检查纯数字CSV文件
        id: check_files
        run: |
          # 检查是否存在纯数字CSV文件
          NUM_FILES=$(find data/ -type f -name '[0-9]*.csv' | wc -l)
          
          if [ "$NUM_FILES" -gt 0 ]; then
            echo "files_exist=true" >> $GITHUB_OUTPUT
            echo "files_count=$NUM_FILES" >> $GITHUB_OUTPUT
            echo "示例文件: $(find data/ -type f -name '[0-9]*.csv' | head -1)"
          else
            echo "files_exist=false" >> $GITHUB_OUTPUT
            echo "files_count=0" >> $GITHUB_OUTPUT
          fi
          echo "当前纯数字CSV文件状态: 存在=$(steps.check_files.outputs.files_exist), 数量=$(steps.check_files.outputs.files_count)"
      
      - name: 清理纯数字CSV
        id: clean_task
        if: steps.check_files.outputs.files_exist == 'true'
        run: |
          echo "删除纯数字CSV文件"
          find data/ -type f -name '[0-9]*.csv' -delete
          
          # 验证清理是否成功
          if [ $(find data/ -type f -name '[0-9]*.csv' | wc -l) -eq 0 ]; then
            echo "task_status=success" >> $GITHUB_OUTPUT
            echo "✅ 纯数字CSV文件已成功清理"
          else
            echo "task_status=failed" >> $GITHUB_OUTPUT
            echo "❌ 纯数字CSV文件清理失败"
            exit 1
          fi
      
      - name: 跳过无文件清理
        if: steps.check_files.outputs.files_exist == 'false'
        run: |
          echo "ℹ️ 无纯数字CSV文件，无需清理"
          echo "task_status=skipped" >> $GITHUB_OUTPUT
      
      - name: 检查文件状态（诊断）
        if: steps.clean_task.outputs.task_status == 'success' || steps.clean_task.conclusion == 'skipped'
        run: |
          echo "清理后纯数字CSV文件状态（仅显示数字CSV相关文件）:"
          find data/ -type f -name '[0-9]*.csv' || echo "无纯数字CSV文件"
          git status -- data/
      
      - name: 提交清理变更
        if: steps.clean_task.outputs.task_status == 'success'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # 检查是否有变化
          git add -u data/
          if [ -n "$(git status --porcelain data/)" ]; then
            echo "检测到纯数字CSV文件变化，准备提交..."
            git commit -m "【手动清理】清除纯数字CSV文件"
            git push origin main
            echo "commit_status=success" >> $GITHUB_OUTPUT
            echo "✅ 文件已成功提交到Git仓库"
          else
            echo "ℹ️ 无文件变化，无需提交"
            echo "commit_status=skipped" >> $GITHUB_OUTPUT
          fi
      
      - name: 发送清理通知
        if: env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          CLEAN_STATUS=${{ steps.clean_task.outputs.task_status }} || 'failed'
          COMMIT_STATUS=${{ steps.commit_task.outputs.commit_status }} || 'n/a'
          
          if [ "$CLEAN_STATUS" = "success" ]; then
            if [ "$COMMIT_STATUS" = "success" ]; then
              MSG="✅ 【手动清理】纯数字CSV文件已清理并提交成功"
            elif [ "$COMMIT_STATUS" = "skipped" ]; then
              MSG="ℹ️ 【手动清理】纯数字CSV文件已清理但无变化"
            else
              MSG="⚠️ 【手动清理】纯数字CSV文件已清理但提交失败"
            fi
          elif [ "$CLEAN_STATUS" = "skipped" ]; then
            MSG="ℹ️ 【手动清理】无纯数字CSV文件，无需清理"
          else
            MSG="❌ 【手动清理】纯数字CSV文件清理失败"
          fi
          
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"$MSG\\n北京时间: ${BEIJING_TIME}\"}}"
