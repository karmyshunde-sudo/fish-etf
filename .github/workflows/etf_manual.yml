name: Hand-任务及数据清理
on:
  workflow_dispatch:
    inputs:
      task:
        description: '任务类型'
        required: true
        type: choice
        options:
          - 'update_etf_list'
          - 'etf_yesno'
          - 'stock_fourty'
          - 'stock_crawler'
          - 'crawl_etf_daily'
          - 'calculate_arbitrage'
          - 'calculate_position'
          - 'clean_daily_data'
          - 'clean_arbitrage_data'
          - 'clean_trade_records'
          - 'clean_numeric_csv'
      max_filename_length:
        description: '最大文件名长度（留空或0表示删除所有纯数字CSV文件）'
        required: false
        type: string

jobs:
  # ========================
  # 手动任务 - 每个任务都有独立Job
  # ========================
  # ETF列表更新（手动）
  update-etf-list-manual:
    name: ETF列表更新（手动）
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'update_etf_list'
    permissions:
      contents: write
    steps:
      - name: 验证时区设置
        run: |
          echo "时区验证: $(date -u '+%Y-%m-%d %H:%M:%S' UTC) | $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S' CST)"
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: 配置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: 安装依赖包
        run: |
          # 首先确认当前目录
          echo "当前工作目录: $(pwd)"
          # 检查文件是否存在
          if [ -f "requirements.txt" ]; then
            echo "✅ requirements.txt 文件存在，开始安装依赖..."
            pip install -r requirements.txt
          else
            echo "❌ 错误: requirements.txt 文件不存在"
            ls -la  # 列出当前目录内容以帮助诊断
            exit 1
          fi
      - name: 创建数据目录
        run: |
          mkdir -p data/{flags,logs} && chmod -R 777 data/
      - name: 执行ETF列表更新（手动）
        env:
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
          TZ: Asia/Shanghai
          TASK: 'update_etf_list'  # 修复：通过环境变量传递任务类型
        run: |
          BEIJING_TIME=$(date '+%Y%m%d_%H%M%S')
          LOG_FILE="data/logs/update_etf_list_${BEIJING_TIME}.log"
          echo "正在执行: ETF列表更新（手动）"
          echo "日志文件: $LOG_FILE"
          python main.py 2>&1 | tee "$LOG_FILE"  # 移除了命令行参数
          # 记录任务状态
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "task_status=success" >> $GITHUB_OUTPUT
          else
            echo "task_status=failed" >> $GITHUB_OUTPUT
          fi
          [ ${PIPESTATUS[0]} -eq 0 ] || exit 1
      - name: 提交数据变更
        if: steps.execute_task.outputs.task_status == 'success'
        run: |
          git config user.name "GitHub Actions" && git config user.email "actions@github.com"
          git add data/all_etfs.csv && [ -n "$(git diff --cached --name-only data/all_etfs.csv)" ] && 
          git commit -m "手动更新ETF列表" && git push origin main
      - name: 发送完成通知
        if: steps.execute_task.outputs.task_status == 'success' && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"✅ 【ETF列表更新（手动）】执行成功\北京时间: ${BEIJING_TIME}\"}}"
      - name: 发送失败通知
        if: failure() && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"⚠️ 【ETF列表更新（手动）】执行失败\北京时间: ${BEIJING_TIME}\"}}"
  # 指数Yes/No 策略（手动）
  etf-yesno-manual:
    name: 指数Yes/No策略（手动）
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'etf_yesno'
    permissions:
      contents: write
    steps:
      - name: 验证时区设置
        run: |
          echo "时区验证: $(date -u '+%Y-%m-%d %H:%M:%S' UTC) | $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S' CST)"
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: 配置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: 安装依赖包
        run: |
          # 首先确认当前目录
          echo "当前工作目录: $(pwd)"
          # 检查文件是否存在
          if [ -f "requirements.txt" ]; then
            echo "✅ requirements.txt 文件存在，开始安装依赖..."
            pip install -r requirements.txt
          else
            echo "❌ 错误: requirements.txt 文件不存在"
            ls -la  # 列出当前目录内容以帮助诊断
            exit 1
          fi
      - name: 创建数据目录
        run: |
          mkdir -p data/{flags,logs} && chmod -R 777 data/
      - name: 执行指数Yes/No策略（手动）
        env:
          WECOM_WEBHOOK: ${{ secrets.WECOM_ETFYESNO }}
          TZ: Asia/Shanghai
          TASK: 'etf_yesno'  # 修复：通过环境变量传递任务类型
        run: |
          BEIJING_TIME=$(date '+%Y%m%d_%H%M%S')
          LOG_FILE="data/logs/etf_yesno_${BEIJING_TIME}.log"
          echo "正在执行: 指数Yes/No 策略（手动）"
          echo "日志文件: $LOG_FILE"
          python main.py 2>&1 | tee "$LOG_FILE"  # 移除了命令行参数
          # 记录任务状态
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "task_status=success" >> $GITHUB_OUTPUT
          else
            echo "task_status=failed" >> $GITHUB_OUTPUT
          fi
          [ ${PIPESTATUS[0]} -eq 0 ] || exit 1
      - name: 发送完成通知
        if: steps.execute_task.outputs.task_status == 'success' && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"✅ 【指数Yes/No策略（手动）】执行成功\北京时间: ${BEIJING_TIME}\"}}"
      - name: 发送失败通知
        if: failure() && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"⚠️ 【指数Yes/No策略（手动）】执行失败\北京时间: ${BEIJING_TIME}\"}}"
 # 个股趋势策略（手动）
  stock-fourty-manual:
    name: 个股趋势策略（手动）
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'stock_fourty'
    permissions:
      contents: write
    steps:
      - name: 验证时区设置
        run: |
          echo "时区验证: $(date -u '+%Y-%m-%d %H:%M:%S' UTC) | $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S' CST)"
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: 配置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: 安装依赖包
        run: |
          # 首先确认当前目录
          echo "当前工作目录: $(pwd)"
          # 检查文件是否存在
          if [ -f "requirements.txt" ]; then
            echo "✅ requirements.txt 文件存在，开始安装依赖..."
            pip install -r requirements.txt
          else
            echo "❌ 错误: requirements.txt 文件不存在"
            ls -la  # 列出当前目录内容以帮助诊断
            exit 1
          fi
      - name: 创建数据目录
        run: |
          mkdir -p data/{flags,logs} && chmod -R 777 data/
      - name: 执行个股趋势策略（手动）
        id: execute_task  # 添加ID以便后续步骤引用
        env:
          WECOM_WEBHOOK: ${{ secrets.STOCK_WEBHOOK }}  # 修改为使用STOCK_WEBHOOK
          TZ: Asia/Shanghai
        run: |
          BEIJING_TIME=$(date '+%Y%m%d_%H%M%S')
          LOG_FILE="data/logs/stock_tickten_${BEIJING_TIME}.log"
          echo "正在执行: 个股趋势策略（手动）"
          echo "日志文件: $LOG_FILE"
          # 执行策略（tickten.py在stock目录）
          if [ -f "stock/tickten.py" ]; then
            echo "找到策略文件: stock/tickten.py"
            python -m stock.tickten 2>&1 | tee "$LOG_FILE"
          else
            echo "错误: 未找到个股趋势策略文件 stock/tickten.py"
            exit 1
          fi
          # 记录任务状态
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "task_status=success" >> $GITHUB_OUTPUT
          else
            echo "task_status=failed" >> $GITHUB_OUTPUT
          fi
      - name: 提交股票趋势策略信息
        if: steps.execute_task.outputs.task_status == 'success'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          # 关键修改：添加data/all_stocks.csv到提交范围
          git add data/all_stocks.csv
          if [ -n "$(git diff --cached --name-only data/all_stocks.csv)" ]; then
            git commit -m "自动更新股票基础信息 [手动]" && git push origin main
          else
            echo "data/all_stocks.csv 股票列表信息没有变化，无需提交"
          fi
      - name: 发送策略通知
        if: env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          STATUS=${{ steps.execute_task.outputs.task_status }} || 'failed'
          EMOJI=${STATUS == 'success' && '✅' || '❌'}
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"$EMOJI 【个股趋势策略（手动）】执行${STATUS}\北京时间: ${BEIJING_TIME}\"}}"
  # 股票日线数据爬取（手动）
  stock-crawler-manual:
    name: 股票日线数据爬取（手动）
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'stock_crawler'
    permissions:
      contents: write
    steps:
      - name: 验证时区设置
        run: |
          echo "时区验证: $(date -u '+%Y-%m-%d %H:%M:%S' UTC) | $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S' CST)"
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: 配置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: 安装依赖包
        run: |
          # 首先确认当前目录
          echo "当前工作目录: $(pwd)"
          # 检查文件是否存在
          if [ -f "requirements.txt" ]; then
            echo "✅ requirements.txt 文件存在，开始安装依赖..."
            pip install -r requirements.txt
          else
            echo "❌ 错误: requirements.txt 文件不存在"
            ls -la  # 列出当前目录内容以帮助诊断
            exit 1
          fi
      - name: 创建数据目录
        run: |
          mkdir -p data/{daily,flags,logs} && chmod -R 777 data/
      - name: 执行股票日线数据爬取（手动）
        env:
          WECOM_WEBHOOK: ${{ secrets.STOCK_WEBHOOK }}  # 使用STOCK_WEBHOOK
          TZ: Asia/Shanghai
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y%m%d_%H%M%S')
          LOG_FILE="data/logs/stock_crawler_${BEIJING_TIME}.log"
          echo "正在执行: 股票日线数据爬取（手动）"
          echo "日志文件: $LOG_FILE"
          # 执行爬取
          if [ -f "stock/crawler.py" ]; then
            echo "找到爬取文件: stock/crawler.py"
            python -m stock.crawler 2>&1 | tee "$LOG_FILE"
          else
            echo "错误: 未找到股票爬取文件 stock/crawler.py"
            exit 1
          fi
          # 记录任务状态
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "task_status=success" >> $GITHUB_OUTPUT
          else
            echo "task_status=failed" >> $GITHUB_OUTPUT
          fi
      - name: 提交更新的股票日线数据（手动）
        if: steps.execute_task.outputs.task_status == 'success'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add data/daily/
          git add data/all_stocks.csv
          if [ -n "$(git diff --cached --name-only data/daily/ data/all_stocks.csv)" ]; then
            git commit -m "手动更新股票日线数据" && git push origin main
          else
            echo "股票日线数据没有变化，无需提交"
          fi
      - name: 发送爬取通知
        if: env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          STATUS=${{ steps.execute_task.outputs.task_status }} || 'failed'
          EMOJI=${STATUS == 'success' && '✅' || '❌'}
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"$EMOJI 【股票日线数据爬取（手动）】执行${STATUS}\北京时间: ${BEIJING_TIME}\"}}"
  # ETF日线数据爬取（手动）
  crawl-etf-daily-manual:
    name: ETF日线数据爬取（手动）
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'crawl_etf_daily'
    permissions:
      contents: write
    steps:
      - name: 验证时区设置
        run: |
          echo "时区验证: $(date -u '+%Y-%m-%d %H:%M:%S' UTC) | $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S' CST)"
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: 配置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: 安装依赖包
        run: |
          # 首先确认当前目录
          echo "当前工作目录: $(pwd)"
          # 检查文件是否存在
          if [ -f "requirements.txt" ]; then
            echo "✅ requirements.txt 文件存在，开始安装依赖..."
            pip install -r requirements.txt
          else
            echo "❌ 错误: requirements.txt 文件不存在"
            ls -la  # 列出当前目录内容以帮助诊断
            exit 1
          fi
      - name: 创建数据目录
        run: |
          mkdir -p data/{etf_daily,flags,logs} && chmod -R 777 data/
      - name: 执行ETF日线数据爬取（手动）
        env:
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
          TZ: Asia/Shanghai
          TASK: 'crawl_etf_daily'  # 修复：通过环境变量传递任务类型
        run: |
          BEIJING_TIME=$(date '+%Y%m%d_%H%M%S')
          LOG_FILE="data/logs/crawl_etf_daily_${BEIJING_TIME}.log"
          echo "正在执行: ETF日线数据爬取（手动）"
          echo "日志文件: $LOG_FILE"
          python main.py 2>&1 | tee "$LOG_FILE"  # 移除了命令行参数
          # 记录任务状态
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "task_status=success" >> $GITHUB_OUTPUT
          else
            echo "task_status=failed" >> $GITHUB_OUTPUT
          fi
          [ ${PIPESTATUS[0]} -eq 0 ] || exit 1
      - name: 提交数据变更
        if: steps.execute_task.outputs.task_status == 'success'
        run: |
          git config user.name "GitHub Actions" && git config user.email "actions@github.com"
          git add data/etf_daily/ && [ -n "$(git diff --cached --name-only data/etf_daily/)" ] && 
          git commit -m "手动更新ETF日线数据" && git push origin main
      - name: 发送完成通知
        if: steps.execute_task.outputs.task_status == 'success' && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"✅ 【ETF日线数据爬取（手动）】执行成功\北京时间: ${BEIJING_TIME}\"}}"
      - name: 发送失败通知
        if: failure() && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"⚠️ 【ETF日线数据爬取（手动）】执行失败\北京时间: ${BEIJING_TIME}\"}}"
  # ETF套利计算（手动）
  calculate-arbitrage-manual:
    name: ETF套利计算（手动）
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'calculate_arbitrage'
    permissions:
      contents: write
    steps:
      - name: 验证时区设置
        run: |
          echo "时区验证: $(date -u '+%Y-%m-%d %H:%M:%S' UTC) | $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S' CST)"
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: 配置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: 安装依赖包
        run: |
          # 首先确认当前目录
          echo "当前工作目录: $(pwd)"
          # 检查文件是否存在
          if [ -f "requirements.txt" ]; then
            echo "✅ requirements.txt 文件存在，开始安装依赖..."
            pip install -r requirements.txt
          else
            echo "❌ 错误: requirements.txt 文件不存在"
            ls -la  # 列出当前目录内容以帮助诊断
            exit 1
          fi
      - name: 创建数据目录
        run: |
          mkdir -p data/{arbitrage,flags,logs} && chmod -R 777 data/
      - name: 执行ETF套利计算（手动）
        env:
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
          TZ: Asia/Shanghai
          TASK: 'calculate_arbitrage'  # 修复：通过环境变量传递任务类型
        run: |
          BEIJING_TIME=$(date '+%Y%m%d_%H%M%S')
          LOG_FILE="data/logs/calculate_arbitrage_${BEIJING_TIME}.log"
          echo "正在执行: ETF套利计算（手动）"
          echo "日志文件: $LOG_FILE"
          python main.py 2>&1 | tee "$LOG_FILE"  # 移除了命令行参数
          # 记录任务状态
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "task_status=success" >> $GITHUB_OUTPUT
          else
            echo "task_status=failed" >> $GITHUB_OUTPUT
          fi
          [ ${PIPESTATUS[0]} -eq 0 ] || exit 1
      - name: 提交数据变更
        if: steps.execute_task.outputs.task_status == 'success'
        run: |
          git config user.name "GitHub Actions" && git config user.email "actions@github.com"
          git add data/arbitrage/ data/flags/{discount,premium}_status.json && 
          [ -n "$(git diff --cached --name-only data/arbitrage/ data/flags/)" ] && 
          git commit -m "手动更新ETF套利数据" && git push origin main
      - name: 发送完成通知
        if: steps.execute_task.outputs.task_status == 'success' && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"✅ 【ETF套利计算（手动）】执行成功\北京时间: ${BEIJING_TIME}\"}}"
      - name: 发送失败通知
        if: failure() && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"⚠️ 【ETF套利计算（手动）】执行失败\北京时间: ${BEIJING_TIME}\"}}"
  # ETF仓位策略计算（手动）
  calculate-position-manual:
    name: ETF仓位策略计算（手动）
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'calculate_position'
    permissions:
      contents: write
    steps:
      - name: 验证时区设置
        run: |
          echo "时区验证: $(date -u '+%Y-%m-%d %H:%M:%S' UTC) | $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S' CST)"
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: 配置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: 安装依赖包
        run: |
          # 首先确认当前目录
          echo "当前工作目录: $(pwd)"
          # 检查文件是否存在
          if [ -f "requirements.txt" ]; then
            echo "✅ requirements.txt 文件存在，开始安装依赖..."
            pip install -r requirements.txt
          else
            echo "❌ 错误: requirements.txt 文件不存在"
            ls -la  # 列出当前目录内容以帮助诊断
            exit 1
          fi
      - name: 创建数据目录
        run: |
          mkdir -p data/{flags,logs} && chmod -R 777 data/
      - name: 检查推送标志
        id: check_flags
        run: |
          BEIJING_DATE=$(TZ=Asia/Shanghai date '+%Y-%m-%d')
          echo "position_pushed=$( [ -f "data/flags/position_pushed_${BEIJING_DATE}.txt" ] && echo true || echo false )" >> $GITHUB_OUTPUT
      - name: 跳过已推送ETF仓位策略计算任务（手动）
        if: steps.check_flags.outputs.position_pushed == 'true'
        run: |
          echo "skip_execution=true" >> $GITHUB_ENV
      - name: 执行ETF仓位策略计算（手动）
        if: env.skip_execution != 'true'
        env:
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
          TZ: Asia/Shanghai
          TASK: 'calculate_position'  # 修复：通过环境变量传递任务类型
        run: |
          BEIJING_TIME=$(date '+%Y%m%d_%H%M%S')
          LOG_FILE="data/logs/calculate_position_${BEIJING_TIME}.log"
          echo "正在执行: ETF仓位策略计算（手动）"
          echo "日志文件: $LOG_FILE"
          python main.py 2>&1 | tee "$LOG_FILE"  # 移除了命令行参数
          # 记录任务状态
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "task_status=success" >> $GITHUB_OUTPUT
          else
            echo "task_status=failed" >> $GITHUB_OUTPUT
          fi
          [ ${PIPESTATUS[0]} -eq 0 ] || exit 1
      - name: 创建推送标志
        if: env.skip_execution != 'true' && steps.execute_task.outputs.task_status == 'success'
        run: |
          BEIJING_DATE=$(TZ=Asia/Shanghai date '+%Y-%m-%d')
          echo "执行完成" > "data/flags/position_pushed_${BEIJING_DATE}.txt"
          git config user.name "GitHub Actions" && git config user.email "actions@github.com"
          git add "data/flags/position_pushed_${BEIJING_DATE}.txt"
          git commit -m "仓位策略已推送标志 [手动]" && git push origin main
      - name: 发送完成通知
        if: steps.execute_task.outputs.task_status == 'success' && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"✅ 【ETF仓位策略计算（手动）】执行成功\北京时间: ${BEIJING_TIME}\"}}"
      - name: 发送失败通知
        if: failure() && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"⚠️ 【ETF仓位策略计算（手动）】执行失败\北京时间: ${BEIJING_TIME}\"}}"
  # ========================
  # 清理任务 - 每个任务都有独立Job
  # ========================
  # 手动清理ETF日线数据
  manual-clean-daily-data:
    name: 手动清理ETF日线数据
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'clean_daily_data'
    permissions:
      contents: write
    steps:
      - name: 验证时区设置
        run: |
          echo "时区验证: $(date -u '+%Y-%m-%d %H:%M:%S' UTC) | $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S' CST)"
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: 清理ETF日线数据
        run: |
          echo "删除 data/etf_daily/*.csv"
          rm -rf data/etf_daily/*.csv
      - name: 提交清理变更
        run: |
          git config user.name "GitHub Actions" && git config user.email "actions@github.com"
          git add data/etf_daily/ && git commit -m "【手动清理】清除ETF日线数据文件" && git push origin main
      - name: 发送清理通知
        if: env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"✅ 【手动清理】ETF日线数据文件已清理完成\北京时间: ${BEIJING_TIME}\"}}"
  # 手动清理ETF套利数据
  manual-clean-arbitrage-data:
    name: 手动清理ETF套利数据
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'clean_arbitrage_data'
    permissions:
      contents: write
    steps:
      - name: 验证时区设置
        run: |
          echo "时区验证: $(date -u '+%Y-%m-%d %H:%M:%S' UTC) | $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S' CST)"
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: 清理ETF套利数据
        run: |
          echo "删除 data/arbitrage/*.csv"
          rm -rf data/arbitrage/*.csv
      - name: 提交清理变更
        run: |
          git config user.name "GitHub Actions" && git config user.email "actions@github.com"
          git add data/arbitrage/ && git commit -m "【手动清理】清除ETF套利数据文件" && git push origin main
      - name: 发送清理通知
        if: env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"✅ 【手动清理】ETF套利数据文件已清理完成\北京时间: ${BEIJING_TIME}\"}}"
  # 手动清理ETF交易记录
  manual-clean-trade-records:
    name: 手动清理ETF交易记录
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'clean_trade_records'
    permissions:
      contents: write
    steps:
      - name: 验证时区设置
        run: |
          echo "时区验证: $(date -u '+%Y-%m-%d %H:%M:%S' UTC) | $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S' CST)"
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: 清理ETF交易记录
        run: |
          echo "删除 data/trade_records.csv"
          rm -f data/trade_records.csv
      - name: 提交清理变更
        run: |
          git config user.name "GitHub Actions" && git config user.email "actions@github.com"
          git add data/trade_records.csv && git commit -m "【手动清理】清除ETF交易记录文件" && git push origin main
      - name: 发送清理通知
        if: env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"✅ 【手动清理】ETF交易记录文件已清理完成\北京时间: ${BEIJING_TIME}\"}}"
  # 手动清理纯数字CSV
  manual-clean-numeric-csv:
    name: 手动清理纯数字CSV
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'clean_numeric_csv'
    permissions:
      contents: write
    steps:
      - name: 验证时区设置
        run: |
          echo "时区验证: $(date -u '+%Y-%m-%d %H:%M:%S' UTC) | $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S' CST)"
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: 清理纯数字CSV
        run: |
          MAX_LENGTH=${{ inputs.max_filename_length }}
          
          # 如果输入为空或为0，则按原逻辑删除所有纯数字CSV文件
          if [ -z "$MAX_LENGTH" ] || [ "$MAX_LENGTH" -eq 0 ]; then
            echo "删除 data/ 目录下的所有纯数字CSV文件"
            find data/ -type f -name '[0-9]*.csv' -delete
          else
            echo "删除 data/ 目录下文件名为数字且文件名长度小于 $MAX_LENGTH 的CSV文件"
            find data/ -type f -name '[0-9]*.csv' -exec sh -c '
              for file; do
                # 提取基础文件名（不含路径）
                filename=$(basename "$file")
                # 移除扩展名
                filename_no_ext="${filename%.csv}"
                # 检查是否为纯数字且长度小于MAX_LENGTH
                if [[ "$filename_no_ext" =~ ^[0-9]+$ ]] && [ ${#filename_no_ext} -lt $MAX_LENGTH ]; then
                  echo "删除: $file"
                  rm -f "$file"
                fi
              done
            ' _ {} \;
          fi
      - name: 提交清理变更
        run: |
          git config user.name "GitHub Actions" && git config user.email "actions@github.com"
          git add -u data/ && git commit -m "【手动清理】清除纯数字CSV文件" && git push origin main
      - name: 发送清理通知
        if: env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"✅ 【手动清理】纯数字CSV文件已清理完成\北京时间: ${BEIJING_TIME}\"}}"
