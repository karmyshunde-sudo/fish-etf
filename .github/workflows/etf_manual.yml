name: 手动任务
on:
  workflow_dispatch:
    inputs:
      task:
        description: '任务类型'
        required: true
        type: choice
        options:
          - 'update_etf_list'
          - 'crawl_etf_daily'
          - 'calculate_arbitrage'
          - 'calculate_position'
          - 'etf_yesno'
          - 'stock_fourty'
          - 'stock_crawler'
jobs:
  # ========================
  # 手动任务 - 每个任务都有独立Job
  # ========================
  # ETF列表更新（手动）
  update-etf-list-manual:
    name: ETF列表更新（手动）
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'update_etf_list'
    permissions:
      contents: write
    steps:
      - name: 验证时区设置
        run: |
          echo "时区验证: $(date -u '+%Y-%m-%d %H:%M:%S' UTC) | $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S' CST)"
      
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 配置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: 安装依赖包
        run: |
          echo "当前工作目录: $(pwd)"
          if [ -f "requirements.txt" ]; then
            echo "✅ requirements.txt 文件存在，开始安装依赖..."
            pip install -r requirements.txt
          else
            echo "❌ 错误: requirements.txt 文件不存在"
            ls -la
            exit 1
          fi
      
      - name: 创建数据目录
        run: |
          mkdir -p data/{flags,logs} && chmod -R 777 data/
      
      - name: 执行ETF列表更新（手动）
        id: execute_task
        env:
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
          TZ: Asia/Shanghai
          TASK: 'update_etf_list'
        run: |
          BEIJING_TIME=$(date '+%Y%m%d_%H%M%S')
          LOG_FILE="data/logs/update_etf_list_${BEIJING_TIME}.log"
          echo "正在执行: ETF列表更新（手动）"
          echo "日志文件: $LOG_FILE"
          python main.py 2>&1 | tee "$LOG_FILE"
          
          # 记录任务状态（严格检查）
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "task_status=success" >> $GITHUB_OUTPUT
          else
            echo "task_status=failed" >> $GITHUB_OUTPUT
          fi
          [ ${PIPESTATUS[0]} -eq 0 ] || exit 1
      
      - name: 检查文件状态（诊断）
        if: steps.execute_task.outputs.task_status == 'success'
        run: |
          echo "检查 data/all_etfs.csv 文件状态:"
          ls -la data/
          git status
          echo "文件内容预览:"
          head -n 3 data/all_etfs.csv || echo "文件为空或不存在"
      
      - name: 提交数据变更
        if: steps.execute_task.outputs.task_status == 'success'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # 检查文件是否存在且有变化
          if [ -f "data/all_etfs.csv" ]; then
            git add data/all_etfs.csv
            if [ -n "$(git status --porcelain data/all_etfs.csv)" ]; then
              echo "检测到ETF列表文件变化，准备提交..."
              git commit -m "手动更新ETF列表 [${{ github.event.inputs.task }}]"
              git push origin main
              echo "✅ 文件已成功提交到Git仓库"
            else
              echo "ℹ️ ETF列表文件无变化，跳过提交"
            fi
          else
            echo "❌ data/all_etfs.csv 文件不存在，无法提交"
            exit 1
          fi
      
      - name: 发送完成通知
        if: steps.execute_task.outputs.task_status == 'success' && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"✅ 【ETF列表更新（手动）】执行成功\\n北京时间: ${BEIJING_TIME}\"}}"
      
      - name: 发送失败通知
        if: failure() && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"⚠️ 【ETF列表更新（手动）】执行失败\\n北京时间: ${BEIJING_TIME}\"}}"

  # 指数Yes/No 策略（手动）
  etf-yesno-manual:
    name: 指数Yes/No策略（手动）
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'etf_yesno'
    permissions:
      contents: write
    steps:
      - name: 验证时区设置
        run: |
          echo "时区验证: $(date -u '+%Y-%m-%d %H:%M:%S' UTC) | $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S' CST)"
      
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 配置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: 安装依赖包
        run: |
          echo "当前工作目录: $(pwd)"
          if [ -f "requirements.txt" ]; then
            echo "✅ requirements.txt 文件存在，开始安装依赖..."
            pip install -r requirements.txt
          else
            echo "❌ 错误: requirements.txt 文件不存在"
            ls -la
            exit 1
          fi
      
      - name: 创建数据目录
        run: |
          mkdir -p data/{flags,logs} && chmod -R 777 data/
      
      - name: 执行指数Yes/No策略（手动）
        id: execute_task
        env:
          WECOM_WEBHOOK: ${{ secrets.WECOM_ETFYESNO }}
          TZ: Asia/Shanghai
          TASK: 'etf_yesno'
        run: |
          BEIJING_TIME=$(date '+%Y%m%d_%H%M%S')
          LOG_FILE="data/logs/etf_yesno_${BEIJING_TIME}.log"
          echo "正在执行: 指数Yes/No 策略（手动）"
          echo "日志文件: $LOG_FILE"
          python main.py 2>&1 | tee "$LOG_FILE"
          
          # 记录任务状态
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "task_status=success" >> $GITHUB_OUTPUT
          else
            echo "task_status=failed" >> $GITHUB_OUTPUT
          fi
          [ ${PIPESTATUS[0]} -eq 0 ] || exit 1
      
      - name: 发送完成通知
        if: steps.execute_task.outputs.task_status == 'success' && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"✅ 【指数Yes/No策略（手动）】执行成功\\n北京时间: ${BEIJING_TIME}\"}}"
      
      - name: 发送失败通知
        if: failure() && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"⚠️ 【指数Yes/No策略（手动）】执行失败\\n北京时间: ${BEIJING_TIME}\"}}"

  # 个股趋势策略（手动）
  stock-fourty-manual:
    name: 个股趋势策略（手动）
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'stock_fourty'
    permissions:
      contents: write
    steps:
      - name: 验证时区设置
        run: |
          echo "时区验证: $(date -u '+%Y-%m-%d %H:%M:%S' UTC) | $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S' CST)"
      
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 配置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: 安装依赖包
        run: |
          echo "当前工作目录: $(pwd)"
          if [ -f "requirements.txt" ]; then
            echo "✅ requirements.txt 文件存在，开始安装依赖..."
            pip install -r requirements.txt
          else
            echo "❌ 错误: requirements.txt 文件不存在"
            ls -la
            exit 1
          fi
      
      - name: 创建数据目录
        run: |
          mkdir -p data/{flags,logs} && chmod -R 777 data/
      
      - name: 执行个股趋势策略（手动）
        id: execute_task
        env:
          WECOM_WEBHOOK: ${{ secrets.STOCK_WEBHOOK }}
          TZ: Asia/Shanghai
        run: |
          BEIJING_TIME=$(date '+%Y%m%d_%H%M%S')
          LOG_FILE="data/logs/stock_tickten_${BEIJING_TIME}.log"
          echo "正在执行: 个股趋势策略（手动）"
          echo "日志文件: $LOG_FILE"
          
          if [ -f "stock/tickten.py" ]; then
            echo "找到策略文件: stock/tickten.py"
            python -m stock.tickten 2>&1 | tee "$LOG_FILE"
          else
            echo "错误: 未找到个股趋势策略文件 stock/tickten.py"
            exit 1
          fi
          
          # 记录任务状态
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "task_status=success" >> $GITHUB_OUTPUT
          else
            echo "task_status=failed" >> $GITHUB_OUTPUT
          fi
      
      - name: 检查文件状态（诊断）
        if: steps.execute_task.outputs.task_status == 'success'
        run: |
          echo "检查 data/all_stocks.csv 文件状态:"
          ls -la data/
          git status
          echo "文件内容预览:"
          head -n 3 data/all_stocks.csv || echo "文件为空或不存在"
      
      - name: 提交股票趋势策略信息
        if: steps.execute_task.outputs.task_status == 'success'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          if [ -f "data/all_stocks.csv" ]; then
            git add data/all_stocks.csv
            if [ -n "$(git status --porcelain data/all_stocks.csv)" ]; then
              echo "检测到股票列表文件变化，准备提交..."
              git commit -m "自动更新股票基础信息 [手动]"
              git push origin main
              echo "✅ 文件已成功提交到Git仓库"
            else
              echo "ℹ️ 股票列表文件无变化，跳过提交"
            fi
          else
            echo "❌ data/all_stocks.csv 文件不存在，无法提交"
            exit 1
          fi
      
      - name: 发送策略通知
        if: env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          STATUS=${{ steps.execute_task.outputs.task_status }} || 'failed'
          EMOJI=${STATUS == 'success' && '✅' || '❌'}
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"$EMOJI 【个股趋势策略（手动）】执行${STATUS}\\n北京时间: ${BEIJING_TIME}\"}}"

  # 股票日线数据爬取（手动）
  stock-crawler-manual:
    name: 股票日线数据爬取（手动）
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'stock_crawler'
    permissions:
      contents: write
    steps:
      - name: 验证时区设置
        run: |
          echo "时区验证: $(date -u '+%Y-%m-%d %H:%M:%S' UTC) | $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S' CST)"
      
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 配置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: 安装依赖包
        run: |
          echo "当前工作目录: $(pwd)"
          if [ -f "requirements.txt" ]; then
            echo "✅ requirements.txt 文件存在，开始安装依赖..."
            pip install -r requirements.txt
          else
            echo "❌ 错误: requirements.txt 文件不存在"
            ls -la
            exit 1
          fi
      
      - name: 创建数据目录
        run: |
          mkdir -p data/{daily,flags,logs} && chmod -R 777 data/
      
      - name: 执行股票日线数据爬取（手动）
        id: execute_task
        env:
          WECOM_WEBHOOK: ${{ secrets.STOCK_WEBHOOK }}
          TZ: Asia/Shanghai
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y%m%d_%H%M%S')
          LOG_FILE="data/logs/stock_crawler_${BEIJING_TIME}.log"
          echo "正在执行: 股票日线数据爬取（手动）"
          echo "日志文件: $LOG_FILE"
          
          if [ -f "stock/crawler.py" ]; then
            echo "找到爬取文件: stock/crawler.py"
            python -m stock.crawler 2>&1 | tee "$LOG_FILE"
          else
            echo "错误: 未找到股票爬取文件 stock/crawler.py"
            exit 1
          fi
          
          # 记录任务状态
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "task_status=success" >> $GITHUB_OUTPUT
          else
            echo "task_status=failed" >> $GITHUB_OUTPUT
          fi
      
      - name: 检查文件状态（诊断）
        if: steps.execute_task.outputs.task_status == 'success'
        run: |
          echo "检查 data/daily/ 目录状态:"
          ls -la data/daily/ | head -n 20
          echo "已爬取股票数量: $(ls -1 data/daily/*.csv 2>/dev/null | wc -l)"
          echo "最近提交的文件:"
          git log -1 --name-status HEAD -- data/daily/
      
      - name: 发送爬取通知
        if: env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          STATUS=${{ steps.execute_task.outputs.task_status }} || 'failed'
          
          # 检查是否有新提交
          HAS_NEW_COMMITS=$(git log -1 --since="1 hour ago" -- data/daily/ | wc -l)
          
          if [ "$HAS_NEW_COMMITS" -gt 0 ]; then
            MSG="✅ 【股票日线数据爬取（手动）】执行成功并已提交"
          else
            MSG="⚠️ 【股票日线数据爬取（手动）】执行成功但无新提交（可能数据无变化）"
          fi
          
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"$MSG\\n北京时间: ${BEIJING_TIME}\"}}"

  # ETF日线数据爬取（手动）
  crawl-etf-daily-manual:
    name: ETF日线数据爬取（手动）
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'crawl_etf_daily'
    permissions:
      contents: write
    steps:
      - name: 验证时区设置
        run: |
          echo "时区验证: $(date -u '+%Y-%m-%d %H:%M:%S' UTC) | $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S' CST)"
      
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 配置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: 安装依赖包
        run: |
          echo "当前工作目录: $(pwd)"
          if [ -f "requirements.txt" ]; then
            echo "✅ requirements.txt 文件存在，开始安装依赖..."
            pip install -r requirements.txt
          else
            echo "❌ 错误: requirements.txt 文件不存在"
            ls -la
            exit 1
          fi
      
      - name: 创建数据目录
        run: |
          mkdir -p data/{etf_daily,flags,logs} && chmod -R 777 data/
      
      - name: 检查交易日
        id: check_trading_day
        run: |
          IS_TRADING_DAY=$(TZ=Asia/Shanghai date '+%u' | awk '$1 <= 5 {print "true"}')
          echo "IS_TRADING_DAY=${IS_TRADING_DAY:-false}" >> $GITHUB_OUTPUT
          echo "交易日检查: ${IS_TRADING_DAY:-false}"
      
      - name: 跳过非交易日
        if: steps.check_trading_day.outputs.IS_TRADING_DAY == 'false'
        run: |
          echo "skip_execution=true" >> $GITHUB_ENV
      
      - name: 执行ETF日线数据爬取（手动）
        id: execute_task
        if: env.skip_execution != 'true'
        env:
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
          TZ: Asia/Shanghai
          TASK: 'crawl_etf_daily'
        run: |
          BEIJING_TIME=$(date '+%Y%m%d_%H%M%S')
          LOG_FILE="data/logs/crawl_etf_daily_${BEIJING_TIME}.log"
          echo "正在执行: ETF日线数据爬取（手动）"
          echo "日志文件: $LOG_FILE"
          python main.py 2>&1 | tee "$LOG_FILE"
          
          # 记录任务状态
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "task_status=success" >> $GITHUB_OUTPUT
          else
            echo "task_status=failed" >> $GITHUB_OUTPUT
          fi
          [ ${PIPESTATUS[0]} -eq 0 ] || exit 1
      
      - name: 检查文件状态（诊断）
        if: steps.execute_task.outputs.task_status == 'success'
        run: |
          echo "检查 data/etf_daily/ 目录状态:"
          ls -la data/etf_daily/ | head -n 20
          echo "已爬取ETF数量: $(ls -1 data/etf_daily/*.csv 2>/dev/null | wc -l)"
          echo "最近提交的文件:"
          git log -1 --name-status HEAD -- data/etf_daily/
      
      - name: 发送完成通知
        if: steps.execute_task.outputs.task_status == 'success' && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          
          # 检查是否有新提交
          HAS_NEW_COMMITS=$(git log -1 --since="1 hour ago" -- data/etf_daily/ | wc -l)
          
          if [ "$HAS_NEW_COMMITS" -gt 0 ]; then
            MSG="✅ 【ETF日线数据爬取（手动）】执行成功并已提交"
          else
            MSG="⚠️ 【ETF日线数据爬取（手动）】执行成功但无新提交（可能数据无变化）"
          fi
          
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"$MSG\\n北京时间: ${BEIJING_TIME}\"}}"
      
      - name: 发送失败通知
        if: failure() && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"⚠️ 【ETF日线数据爬取（手动）】执行失败\\n北京时间: ${BEIJING_TIME}\"}}"

  # ETF套利计算（手动）
  calculate-arbitrage-manual:
    name: ETF套利计算（手动）
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'calculate_arbitrage'
    permissions:
      contents: write
    steps:
      - name: 验证时区设置
        run: |
          echo "时区验证: $(date -u '+%Y-%m-%d %H:%M:%S' UTC) | $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S' CST)"
      
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 配置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: 安装依赖包
        run: |
          echo "当前工作目录: $(pwd)"
          if [ -f "requirements.txt" ]; then
            echo "✅ requirements.txt 文件存在，开始安装依赖..."
            pip install -r requirements.txt
          else
            echo "❌ 错误: requirements.txt 文件不存在"
            ls -la
            exit 1
          fi
      
      - name: 创建数据目录
        run: |
          mkdir -p data/{arbitrage,flags,logs} && chmod -R 777 data/
      
      - name: 执行ETF套利计算（手动）
        id: execute_task
        env:
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
          TZ: Asia/Shanghai
          TASK: 'calculate_arbitrage'
        run: |
          BEIJING_TIME=$(date '+%Y%m%d_%H%M%S')
          LOG_FILE="data/logs/calculate_arbitrage_${BEIJING_TIME}.log"
          echo "正在执行: ETF套利计算（手动）"
          echo "日志文件: $LOG_FILE"
          python main.py 2>&1 | tee "$LOG_FILE"
          
          # 记录任务状态
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "task_status=success" >> $GITHUB_OUTPUT
          else
            echo "task_status=failed" >> $GITHUB_OUTPUT
          fi
          [ ${PIPESTATUS[0]} -eq 0 ] || exit 1
      
      - name: 检查文件状态（诊断）
        if: steps.execute_task.outputs.task_status == 'success'
        run: |
          echo "检查 data/arbitrage/ 目录状态:"
          ls -la data/arbitrage/
          git status
          echo "部分文件内容预览:"
          head -n 3 data/arbitrage/*.csv 2>/dev/null || echo "无CSV文件或为空"
      
      - name: 提交数据变更
        if: steps.execute_task.outputs.task_status == 'success'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # 检查arbitrage目录是否有CSV文件
          if [ -n "$(ls -A data/arbitrage/*.csv 2>/dev/null)" ]; then
            git add data/arbitrage/ data/flags/{discount,premium}_status.json
            if [ -n "$(git status --porcelain data/arbitrage/ data/flags/)" ]; then
              echo "检测到ETF套利数据变化，准备提交..."
              git commit -m "手动更新ETF套利数据 [${{ github.event.inputs.task }}]"
              git push origin main
              echo "✅ 文件已成功提交到Git仓库"
            else
              echo "ℹ️ ETF套利数据无变化，跳过提交"
            fi
          else
            echo "ℹ️ data/arbitrage/ 目录为空，无需提交"
          fi
      
      - name: 发送完成通知
        if: steps.execute_task.outputs.task_status == 'success' && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"✅ 【ETF套利计算（手动）】执行成功\\n北京时间: ${BEIJING_TIME}\"}}"
      
      - name: 发送失败通知
        if: failure() && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"⚠️ 【ETF套利计算（手动）】执行失败\\n北京时间: ${BEIJING_TIME}\"}}"

  # ETF仓位策略计算（手动）
  calculate-position-manual:
    name: ETF仓位策略计算（手动）
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'calculate_position'
    permissions:
      contents: write
    steps:
      - name: 验证时区设置
        run: |
          echo "时区验证: $(date -u '+%Y-%m-%d %H:%M:%S' UTC) | $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S' CST)"
      
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 配置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: 安装依赖包
        run: |
          echo "当前工作目录: $(pwd)"
          if [ -f "requirements.txt" ]; then
            echo "✅ requirements.txt 文件存在，开始安装依赖..."
            pip install -r requirements.txt
          else
            echo "❌ 错误: requirements.txt 文件不存在"
            ls -la
            exit 1
          fi
      
      - name: 创建数据目录
        run: |
          mkdir -p data/{flags,logs} && chmod -R 777 data/
      
      - name: 检查推送标志
        id: check_flags
        run: |
          BEIJING_DATE=$(TZ=Asia/Shanghai date '+%Y-%m-%d')
          echo "position_pushed=$( [ -f "data/flags/position_pushed_${BEIJING_DATE}.txt" ] && echo true || echo false )" >> $GITHUB_OUTPUT
      
      - name: 跳过已推送ETF仓位策略计算任务（手动）
        if: steps.check_flags.outputs.position_pushed == 'true'
        run: |
          echo "skip_execution=true" >> $GITHUB_ENV
      
      - name: 执行ETF仓位策略计算（手动）
        id: execute_task
        if: env.skip_execution != 'true'
        env:
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
          TZ: Asia/Shanghai
          TASK: 'calculate_position'
        run: |
          BEIJING_TIME=$(date '+%Y%m%d_%H%M%S')
          LOG_FILE="data/logs/calculate_position_${BEIJING_TIME}.log"
          echo "正在执行: ETF仓位策略计算（手动）"
          echo "日志文件: $LOG_FILE"
          python main.py 2>&1 | tee "$LOG_FILE"
          
          # 记录任务状态
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "task_status=success" >> $GITHUB_OUTPUT
          else
            echo "task_status=failed" >> $GITHUB_OUTPUT
          fi
          [ ${PIPESTATUS[0]} -eq 0 ] || exit 1
      
      - name: 检查文件状态（诊断）
        if: steps.execute_task.outputs.task_status == 'success'
        run: |
          echo "检查 data/flags/ 目录状态:"
          ls -la data/flags/
          git status
          echo "position_pushed文件内容:"
          cat data/flags/position_pushed_$(TZ=Asia/Shanghai date '+%Y-%m-%d').txt || echo "文件不存在"
      
      - name: 创建推送标志
        if: env.skip_execution != 'true' && steps.execute_task.outputs.task_status == 'success'
        run: |
          BEIJING_DATE=$(TZ=Asia/Shanghai date '+%Y-%m-%d')
          echo "执行完成" > "data/flags/position_pushed_${BEIJING_DATE}.txt"
          git config user.name "GitHub Actions" && git config user.email "actions@github.com"
          
          git add "data/flags/position_pushed_${BEIJING_DATE}.txt"
          if [ -n "$(git status --porcelain data/flags/position_pushed_${BEIJING_DATE}.txt)" ]; then
            git commit -m "仓位策略已推送标志 [手动]"
            git push origin main
            echo "✅ 推送标志文件已成功提交到Git仓库"
          else
            echo "ℹ️ 推送标志文件无变化，跳过提交"
          fi
      
      - name: 发送完成通知
        if: steps.execute_task.outputs.task_status == 'success' && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"✅ 【ETF仓位策略计算（手动）】执行成功\\n北京时间: ${BEIJING_TIME}\"}}"
      
      - name: 发送失败通知
        if: failure() && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"⚠️ 【ETF仓位策略计算（手动）】执行失败\\n北京时间: ${BEIJING_TIME}\"}}"
