name: 手动任务
on:
  workflow_dispatch:
    inputs:
      task:
        description: '任务类型'
        required: true
        type: choice
        options:
          - 'update_etf_list'
          - 'crawl_etf_daily'
          - 'calculate_arbitrage'
          - 'calculate_position'
          - 'etf_yesno'
          - 'stock_fourty'
          - 'stock_crawler'

jobs:
  # ========================
  # 手动任务 - 每个任务都有独立Job
  # ========================
  # ETF列表更新（手动）
  update-etf-list-manual:
    name: ETF列表更新（手动）
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'update_etf_list'
    permissions:
      contents: write
    steps:
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 设置环境
        uses: ./.github/actions/setup_environment
      
      - name: 执行ETF列表更新
        id: execute_task
        env:
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
          TASK: 'update_etf_list'
        run: |
          BEIJING_TIME=$(date '+%Y%m%d_%H%M%S')
          LOG_FILE="data/logs/update_etf_list_${BEIJING_TIME}.log"
          echo "正在执行: ETF列表更新（手动）"
          echo "日志文件: $LOG_FILE"
          python main.py 2>&1 | tee "$LOG_FILE"
          
          # 记录任务状态
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "task_status=success" >> $GITHUB_OUTPUT
          else
            echo "task_status=failed" >> $GITHUB_OUTPUT
          fi
          [ ${PIPESTATUS[0]} -eq 0 ] || exit 1
      
      - name: 检查文件状态（诊断）
        if: steps.execute_task.outputs.task_status == 'success'
        run: |
          echo "检查 data/all_etfs.csv 文件状态:"
          ls -la data/all_etfs.csv 2>/dev/null || echo "文件不存在"
          echo "文件内容预览:"
          head -n 3 data/all_etfs.csv || echo "文件为空或不存在"
      
      - name: 发送通知
        uses: ./.github/actions/send_notification
        with:
          task-name: "ETF列表更新（手动）"
          status: ${{ steps.execute_task.outputs.task_status }}
          webhook-secret: "WECOM_WEBHOOK"

  # 指数Yes/No 策略（手动）
  etf-yesno-manual:
    name: 指数Yes/No策略（手动）
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'etf_yesno'
    permissions:
      contents: write
    steps:
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 设置环境
        uses: ./.github/actions/setup_environment
      
      - name: 执行指数Yes/No策略
        id: execute_task
        env:
          WECOM_WEBHOOK: ${{ secrets.WECOM_ETFYESNO }}
          TASK: 'etf_yesno'
        run: |
          BEIJING_TIME=$(date '+%Y%m%d_%H%M%S')
          LOG_FILE="data/logs/etf_yesno_${BEIJING_TIME}.log"
          echo "正在执行: 指数Yes/No 策略（手动）"
          echo "日志文件: $LOG_FILE"
          python main.py 2>&1 | tee "$LOG_FILE"
          
          # 记录任务状态
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "task_status=success" >> $GITHUB_OUTPUT
          else
            echo "task_status=failed" >> $GITHUB_OUTPUT
          fi
          [ ${PIPESTATUS[0]} -eq 0 ] || exit 1
      
      - name: 检查文件状态（诊断）
        if: steps.execute_task.outputs.task_status == 'success'
        run: |
          echo "检查 data/flags/ 目录状态:"
          ls -la data/flags/ 2>/dev/null || echo "目录不存在"
          echo "文件内容预览:"
          head -n 3 data/flags/*.txt 2>/dev/null || echo "无标志文件或为空"
      
      - name: 发送通知
        uses: ./.github/actions/send_notification
        with:
          task-name: "指数Yes/No策略（手动）"
          status: ${{ steps.execute_task.outputs.task_status }}
          webhook-secret: "WECOM_ETFYESNO"

  # 个股趋势策略（手动）
  stock-fourty-manual:
    name: 个股趋势策略（手动）
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'stock_fourty'
    permissions:
      contents: write
    steps:
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 设置环境
        uses: ./.github/actions/setup_environment
      
      - name: 执行个股趋势策略
        id: execute_task
        env:
          WECOM_WEBHOOK: ${{ secrets.STOCK_WEBHOOK }}
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y%m%d_%H%M%S')
          LOG_FILE="data/logs/stock_tickten_${BEIJING_TIME}.log"
          echo "正在执行: 个股趋势策略（手动）"
          echo "日志文件: $LOG_FILE"
          
          if [ -f "stock/tickten.py" ]; then
            echo "找到策略文件: stock/tickten.py"
            python -m stock.tickten 2>&1 | tee "$LOG_FILE"
          else
            echo "错误: 未找到个股趋势策略文件 stock/tickten.py"
            exit 1
          fi
          
          # 记录任务状态
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "task_status=success" >> $GITHUB_OUTPUT
          else
            echo "task_status=failed" >> $GITHUB_OUTPUT
          fi
      
      - name: 检查文件状态（诊断）
        if: steps.execute_task.outputs.task_status == 'success'
        run: |
          echo "检查 data/all_stocks.csv 文件状态:"
          ls -la data/all_stocks.csv 2>/dev/null || echo "文件不存在"
          echo "文件内容预览:"
          head -n 3 data/all_stocks.csv || echo "文件为空或不存在"
      
      - name: 创建推送标志
        if: steps.execute_task.outputs.task_status == 'success'
        run: |
          BEIJING_DATE=$(TZ=Asia/Shanghai date '+%Y-%m-%d')
          echo "执行完成" > "data/flags/stock_tickten_pushed_${BEIJING_DATE}.txt"
      
      - name: 发送通知
        uses: ./.github/actions/send_notification
        with:
          task-name: "个股趋势策略（手动）"
          status: ${{ steps.execute_task.outputs.task_status }}
          webhook-secret: "STOCK_WEBHOOK"

  # ETF日线数据爬取（手动）
  crawl-etf-daily-manual:
    name: ETF日线数据爬取（手动）
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'crawl_etf_daily'
    permissions:
      contents: write
    steps:
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 设置环境
        uses: ./.github/actions/setup_environment
      
      - name: 检查交易日
        id: check_trading_day
        run: |
          IS_TRADING_DAY=$(TZ=Asia/Shanghai date '+%u' | awk '$1 <= 5 {print "true"}')
          echo "IS_TRADING_DAY=${IS_TRADING_DAY:-false}" >> $GITHUB_OUTPUT
          echo "交易日检查: ${IS_TRADING_DAY:-false}"
      
      - name: 跳过非交易日
        if: steps.check_trading_day.outputs.IS_TRADING_DAY == 'false'
        run: |
          echo "skip_execution=true" >> $GITHUB_ENV
      
      - name: 执行ETF日线数据爬取
        id: execute_task
        if: env.skip_execution != 'true'
        env:
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
          TASK: 'crawl_etf_daily'
        run: |
          BEIJING_TIME=$(date '+%Y%m%d_%H%M%S')
          LOG_FILE="data/logs/crawl_etf_daily_${BEIJING_TIME}.log"
          echo "正在执行: ETF日线数据爬取（手动）"
          echo "日志文件: $LOG_FILE"
          python main.py 2>&1 | tee "$LOG_FILE"
          
          # 记录任务状态
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "task_status=success" >> $GITHUB_OUTPUT
          else
            echo "task_status=failed" >> $GITHUB_OUTPUT
          fi
          [ ${PIPESTATUS[0]} -eq 0 ] || exit 1
      
      - name: 检查文件状态（诊断）
        if: steps.execute_task.outputs.task_status == 'success'
        run: |
          echo "检查 data/etf_daily/ 目录状态:"
          ls -la data/etf_daily/ 2>/dev/null || echo "目录不存在或为空"
          echo "已爬取ETF数量: $(ls -1 data/etf_daily/*.csv 2>/dev/null | wc -l)"
      
      - name: 发送通知
        uses: ./.github/actions/send_notification
        with:
          task-name: "ETF日线数据爬取（手动）"
          status: ${{ steps.execute_task.outputs.task_status }}
          webhook-secret: "WECOM_WEBHOOK"

  # ETF套利计算（手动）
  calculate-arbitrage-manual:
    name: ETF套利计算（手动）
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'calculate_arbitrage'
    permissions:
      contents: write
    steps:
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 设置环境
        uses: ./.github/actions/setup_environment
      
      - name: 执行ETF套利计算
        id: execute_task
        env:
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
          TASK: 'calculate_arbitrage'
        run: |
          BEIJING_TIME=$(date '+%Y%m%d_%H%M%S')
          LOG_FILE="data/logs/calculate_arbitrage_${BEIJING_TIME}.log"
          echo "正在执行: ETF套利计算（手动）"
          echo "日志文件: $LOG_FILE"
          python main.py 2>&1 | tee "$LOG_FILE"
          
          # 记录任务状态
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "task_status=success" >> $GITHUB_OUTPUT
          else
            echo "task_status=failed" >> $GITHUB_OUTPUT
          fi
          [ ${PIPESTATUS[0]} -eq 0 ] || exit 1
      
      - name: 检查文件状态（诊断）
        if: steps.execute_task.outputs.task_status == 'success'
        run: |
          echo "检查 data/arbitrage/ 目录状态:"
          ls -la data/arbitrage/ 2>/dev/null || echo "目录不存在"
          echo "部分文件内容预览:"
          head -n 3 data/arbitrage/*.csv 2>/dev/null || echo "无CSV文件或为空"
      
      - name: 发送通知
        uses: ./.github/actions/send_notification
        with:
          task-name: "ETF套利计算（手动）"
          status: ${{ steps.execute_task.outputs.task_status }}
          webhook-secret: "WECOM_WEBHOOK"

  # ETF仓位策略计算（手动）
  calculate-position-manual:
    name: ETF仓位策略计算（手动）
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'calculate_position'
    permissions:
      contents: write
    steps:
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 设置环境
        uses: ./.github/actions/setup_environment
      
      - name: 检查推送标志
        id: check_flags
        run: |
          BEIJING_DATE=$(TZ=Asia/Shanghai date '+%Y-%m-%d')
          echo "position_pushed=$( [ -f "data/flags/position_pushed_${BEIJING_DATE}.txt" ] && echo true || echo false )" >> $GITHUB_OUTPUT
      
      - name: 跳过已推送任务
        if: steps.check_flags.outputs.position_pushed == 'true'
        run: |
          echo "skip_execution=true" >> $GITHUB_ENV
      
      - name: 执行ETF仓位策略计算
        id: execute_task
        if: env.skip_execution != 'true'
        env:
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
          TASK: 'calculate_position'
        run: |
          BEIJING_TIME=$(date '+%Y%m%d_%H%M%S')
          LOG_FILE="data/logs/calculate_position_${BEIJING_TIME}.log"
          echo "正在执行: ETF仓位策略计算（手动）"
          echo "日志文件: $LOG_FILE"
          python main.py 2>&1 | tee "$LOG_FILE"
          
          # 记录任务状态
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "task_status=success" >> $GITHUB_OUTPUT
          else
            echo "task_status=failed" >> $GITHUB_OUTPUT
          fi
          [ ${PIPESTATUS[0]} -eq 0 ] || exit 1
      
      - name: 检查文件状态（诊断）
        if: steps.execute_task.outputs.task_status == 'success'
        run: |
          echo "检查 data/flags/ 目录状态:"
          ls -la data/flags/ 2>/dev/null || echo "目录不存在"
          echo "position_pushed文件内容:"
          cat data/flags/position_pushed_$(TZ=Asia/Shanghai date '+%Y-%m-%d').txt 2>/dev/null || echo "文件不存在"
      
      - name: 创建推送标志
        if: env.skip_execution != 'true' && steps.execute_task.outputs.task_status == 'success'
        run: |
          BEIJING_DATE=$(TZ=Asia/Shanghai date '+%Y-%m-%d')
          echo "执行完成" > "data/flags/position_pushed_${BEIJING_DATE}.txt"
      
      - name: 发送通知
        uses: ./.github/actions/send_notification
        with:
          task-name: "ETF仓位策略计算（手动）"
          status: ${{ steps.execute_task.outputs.task_status }}
          webhook-secret: "WECOM_WEBHOOK"
