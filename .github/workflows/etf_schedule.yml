name: 定时任务
on:
  schedule:
    - cron: '0 10 * * 1-5'   # UTC 10:00 = 北京时间 18:00 (ETF日线爬取)
    - cron: '*/5 2-7 * * 1-5' # UTC 02:00-07:00 = 北京时间 10:00-15:00 (ETF套利计算)
    - cron: '30 5 * * 1-5'    # UTC 05:30 = 北京时间 13:30 (ETF仓位策略)
    - cron: '0 1 * * 0'       # UTC 01:00 = 北京时间 09:00 (ETF列表更新)
    - cron: '0 8 * * *'       # UTC 08:00 = 北京时间 16:00 (指数Yes/No)
    - cron: '30 0 * * 1-5'    # UTC 0:30 = 北京时间 8:30 (个股趋势策略)
    - cron: '*/10 12-22 * * *'    # UTC 11:00 = 北京时间 20:00-06:00 (股票日线爬取)
  workflow_dispatch:
    inputs:
      task:
        description: '任务类型'
        required: true
        type: choice
        options:
          - 'update_etf_list'
          - 'crawl_etf_daily'
          - 'calculate_arbitrage'
          - 'calculate_position'
          - 'etf_yesno'
          - 'stock_fourty'
          - 'stock_crawler'

jobs:
  # ========================
  # 定时任务 - 每个任务都有独立Job
  # ========================
  # ETF日线数据爬取（定时）
  crawl-etf-daily-schedule:
    name: ETF日线爬取（定时）
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' && github.event.schedule == '0 10 * * 1-5'
    permissions:
      contents: write
    steps:
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 设置环境
        uses: ./.github/actions/setup_environment
      
      - name: 检查交易日
        id: check_trading_day
        run: |
          IS_TRADING_DAY=$(TZ=Asia/Shanghai date '+%u' | awk '$1 <= 5 {print "true"}')
          echo "IS_TRADING_DAY=${IS_TRADING_DAY:-false}" >> $GITHUB_OUTPUT
          echo "交易日检查: ${IS_TRADING_DAY:-false}"
      
      - name: 跳过非交易日
        if: steps.check_trading_day.outputs.IS_TRADING_DAY == 'false'
        run: |
          echo "skip_execution=true" >> $GITHUB_ENV
      
      - name: 执行ETF日线数据爬取
        uses: ./.github/actions/execute_task
        with:
          task-name: "ETF日线数据爬取（定时）"
          task-type: "crawl_etf_daily"
          webhook-secret: "WECOM_WEBHOOK"
          log-file: "data/logs/crawl_etf_daily"
          command: "python main.py"
          skip-check: "env.skip_execution != 'true'"
      
      - name: 发送完成通知
        if: steps.execute_task.outputs.task_status == 'success' && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          MSG="✅ 【ETF日线数据爬取（定时）】执行成功"
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"$MSG\\n北京时间: ${BEIJING_TIME}\"}}"
      
      - name: 发送失败通知
        if: failure() && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          MSG="❌ 【ETF日线数据爬取（定时）】执行失败"
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"$MSG\\n北京时间: ${BEIJING_TIME}\"}}"

  # ETF套利计算（定时）
  calculate-arbitrage-schedule:
    name: ETF套利计算（定时）
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' && github.event.schedule == '*/5 2-7 * * 1-5'
    permissions:
      contents: write
    steps:
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 设置环境
        uses: ./.github/actions/setup_environment
      
      - name: 执行ETF套利计算
        uses: ./.github/actions/execute_task
        with:
          task-name: "ETF套利计算（定时）"
          task-type: "calculate_arbitrage"
          webhook-secret: "WECOM_WEBHOOK"
          log-file: "data/logs/calculate_arbitrage"
          command: "python main.py"
      
      - name: 发送完成通知
        if: steps.execute_task.outputs.task_status == 'success' && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          MSG="✅ 【ETF套利计算（定时）】执行成功"
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"$MSG\\n北京时间: ${BEIJING_TIME}\"}}"
      
      - name: 发送失败通知
        if: failure() && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          MSG="❌ 【ETF套利计算（定时）】执行失败"
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"$MSG\\n北京时间: ${BEIJING_TIME}\"}}"

  # ETF仓位策略计算（定时）
  calculate-position-schedule:
    name: ETF仓位策略计算（定时）
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' && github.event.schedule == '30 5 * * 1-5'
    permissions:
      contents: write
    steps:
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 设置环境
        uses: ./.github/actions/setup_environment
      
      - name: 检查推送标志
        id: check_flags
        run: |
          BEIJING_DATE=$(TZ=Asia/Shanghai date '+%Y-%m-%d')
          echo "position_pushed=$( [ -f "data/flags/position_pushed_${BEIJING_DATE}.txt" ] && echo true || echo false )" >> $GITHUB_OUTPUT
      
      - name: 跳过已推送任务
        if: steps.check_flags.outputs.position_pushed == 'true'
        run: |
          echo "skip_execution=true" >> $GITHUB_ENV
      
      - name: 执行ETF仓位策略计算
        uses: ./.github/actions/execute_task
        with:
          task-name: "ETF仓位策略计算（定时）"
          task-type: "calculate_position"
          webhook-secret: "WECOM_WEBHOOK"
          log-file: "data/logs/calculate_position"
          command: "python main.py"
          skip-check: "env.skip_execution != 'true'"
      
      - name: 创建ETF仓位推送标志
        if: env.skip_execution != 'true' && steps.execute_task.outputs.task_status == 'success'
        run: |
          BEIJING_DATE=$(TZ=Asia/Shanghai date '+%Y-%m-%d')
          echo "执行完成" > "data/flags/position_pushed_${BEIJING_DATE}.txt"
      
      - name: 发送完成通知
        if: steps.execute_task.outputs.task_status == 'success' && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          MSG="✅ 【ETF仓位策略计算（定时）】执行成功"
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"$MSG\\n北京时间: ${BEIJING_TIME}\"}}"
      
      - name: 发送失败通知
        if: failure() && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          MSG="❌ 【ETF仓位策略计算（定时）】执行失败"
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"$MSG\\n北京时间: ${BEIJING_TIME}\"}}"

  # ETF列表更新（定时）
  update-etf-list-schedule:
    name: ETF列表更新（定时）
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' && github.event.schedule == '0 1 * * 0'
    permissions:
      contents: write
    steps:
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 设置环境
        uses: ./.github/actions/setup_environment
      
      - name: 执行ETF列表更新
        uses: ./.github/actions/execute_task
        with:
          task-name: "ETF列表更新（定时）"
          task-type: "update_etf_list"
          webhook-secret: "WECOM_WEBHOOK"
          log-file: "data/logs/update_etf_list"
          command: "python main.py"
      
      - name: 发送完成通知
        if: steps.execute_task.outputs.task_status == 'success' && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          MSG="✅ 【ETF列表更新（定时）】执行成功"
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"$MSG\\n北京时间: ${BEIJING_TIME}\"}}"
      
      - name: 发送失败通知
        if: failure() && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          MSG="❌ 【ETF列表更新（定时）】执行失败"
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"$MSG\\n北京时间: ${BEIJING_TIME}\"}}"

  # 指数Yes/No 策略（定时）
  etf-yesno-schedule:
    name: 指数Yes/No 策略（定时）
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' && github.event.schedule == '0 8 * * *'
    permissions:
      contents: write
    steps:
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 设置环境
        uses: ./.github/actions/setup_environment
      
      - name: 执行指数Yes/No策略
        uses: ./.github/actions/execute_task
        with:
          task-name: "指数Yes/No 策略（定时）"
          task-type: "etf_yesno"
          webhook-secret: "WECOM_ETFYESNO"
          log-file: "data/logs/etf_yesno"
          command: "python main.py"
      
      - name: 发送完成通知
        if: steps.execute_task.outputs.task_status == 'success' && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          MSG="✅ 【指数Yes/No策略（定时）】执行成功"
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"$MSG\\n北京时间: ${BEIJING_TIME}\"}}"
      
      - name: 发送失败通知
        if: failure() && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          MSG="❌ 【指数Yes/No策略（定时）】执行失败"
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"$MSG\\n北京时间: ${BEIJING_TIME}\"}}"

  # 个股趋势策略（定时）
  stock-fourty-schedule:
    name: 个股趋势策略 (TickTen) - 定时
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' && github.event.schedule == '30 0 * * 1-5'
    permissions:
      contents: write
    steps:
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 设置环境
        uses: ./.github/actions/setup_environment
      
      - name: 检查交易日（定时）
        id: check_trading_day
        run: |
          IS_TRADING_DAY=$(TZ=Asia/Shanghai date '+%u' | awk '$1 <= 5 {print "true"}')
          echo "IS_TRADING_DAY=${IS_TRADING_DAY:-false}" >> $GITHUB_OUTPUT
      
      - name: 检查推送标志（定时）
        id: check_flags
        run: |
          BEIJING_DATE=$(TZ=Asia/Shanghai date '+%Y-%m-%d')
          echo "stock_tickten_pushed=$( [ -f "data/flags/stock_tickten_pushed_${BEIJING_DATE}.txt" ] && echo true || echo false )" >> $GITHUB_OUTPUT
      
      - name: 跳过非交易日（定时）
        if: steps.check_trading_day.outputs.IS_TRADING_DAY == 'false'
        run: |
          echo "skip_execution=true" >> $GITHUB_ENV
      
      - name: 跳过已推送任务（定时）
        if: steps.check_flags.outputs.stock_tickten_pushed == 'true'
        run: |
          echo "skip_execution=true" >> $GITHUB_ENV
      
      - name: 执行个股趋势策略
        if: env.skip_execution != 'true'
        env:
          WECOM_WEBHOOK: ${{ secrets.STOCK_WEBHOOK }}
          TZ: Asia/Shanghai
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y%m%d_%H%M%S')
          LOG_FILE="data/logs/stock_tickten_${BEIJING_TIME}.log"
          echo "正在执行: 个股趋势策略 (TickTen)（定时）"
          echo "日志文件: $LOG_FILE"
          
          if [ -f "stock/tickten.py" ]; then
            echo "找到策略文件: stock/tickten.py"
            python -m stock.tickten 2>&1 | tee "$LOG_FILE"
          else
            echo "错误: 未找到个股趋势策略文件 stock/tickten.py"
            exit 1
          fi
          
          # 记录任务状态
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "task_status=success" >> $GITHUB_OUTPUT
          else
            echo "task_status=failed" >> $GITHUB_OUTPUT
          fi
      
      - name: 创建推送标志
        if: env.skip_execution != 'true' && steps.execute_task.outputs.task_status == 'success'
        run: |
          BEIJING_DATE=$(TZ=Asia/Shanghai date '+%Y-%m-%d')
          echo "执行完成" > "data/flags/stock_tickten_pushed_${BEIJING_DATE}.txt"
      
      - name: 发送完成通知
        if: steps.execute_task.outputs.task_status == 'success' && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          STATUS=${{ steps.execute_task.outputs.task_status }} || 'failed'
          EMOJI=${STATUS == 'success' && '✅' || '❌'}
          MSG="$EMOJI 【个股趋势策略（定时）】执行成功"
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"$MSG\\n北京时间: ${BEIJING_TIME}\"}}"
      
      - name: 发送失败通知
        if: failure() && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          MSG="❌ 【个股趋势策略（定时）】执行失败"
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"$MSG\\n北京时间: ${BEIJING_TIME}\"}}"

  # 股票日线数据爬取（定时）
  stock-crawler-schedule:
    name: 股票日线数据爬取（定时）
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' && github.event.schedule == '*/10 12-22 * * *'
    permissions:
      contents: write
    steps:
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 设置环境
        uses: ./.github/actions/setup_environment
      
      - name: 检查交易日
        id: check_trading_day
        run: |
          IS_TRADING_DAY=$(TZ=Asia/Shanghai date '+%u' | awk '$1 <= 5 {print "true"}')
          echo "IS_TRADING_DAY=${IS_TRADING_DAY:-false}" >> $GITHUB_OUTPUT
      
      - name: 跳过非交易日
        if: steps.check_trading_day.outputs.IS_TRADING_DAY == 'false'
        run: |
          echo "skip_execution=true" >> $GITHUB_ENV
      
      - name: 执行股票日线数据爬取
        if: env.skip_execution != 'true'
        uses: ./.github/actions/execute_task
        with:
          task-name: "股票日线数据爬取（定时）"
          task-type: "stock_crawler"
          webhook-secret: "STOCK_WEBHOOK"
          log-file: "data/logs/stock_crawler"
          command: "python -m stock.crawler"
          skip-check: "env.skip_execution != 'true'"
      
      - name: 发送完成通知
        if: steps.execute_task.outputs.task_status == 'success' && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          MSG="✅ 【股票日线数据爬取（定时）】执行成功"
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"$MSG\\n北京时间: ${BEIJING_TIME}\"}}"
      
      - name: 发送失败通知
        if: failure() && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          MSG="❌ 【股票日线数据爬取（定时）】执行失败"
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"$MSG\\n北京时间: ${BEIJING_TIME}\"}}"
