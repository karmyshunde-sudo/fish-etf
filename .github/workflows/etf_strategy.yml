name: ETF数据爬取与策略推送

on:
  schedule:
    # GitHub Actions使用UTC时区，注释中表示对应的北京时间
    - cron: '0 8 * * 1-5'   # UTC 08:00 = 北京时间 16:00 (日线爬取)
    - cron: '40 1-6 * * 1-5' # UTC 01:40-06:40 = 北京时间 09:40-14:40 (套利计算)
    - cron: '0 6 * * 1-5'   # UTC 06:00 = 北京时间 14:00 (仓位策略)
    - cron: '0 12 * * 0'    # UTC 12:00 = 北京时间 20:00 (ETF列表更新，周日)
  workflow_dispatch:
    inputs:
      task:
        description: '任务类型'
        required: true
        type: choice
        options:
          - 'crawl_etf_daily'
          - 'calculate_arbitrage'
          - 'calculate_position'
          - 'update_etf_list'

jobs:
  run_etf_task:
    if: >-
      (github.event_name == 'schedule') || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.task != '')
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
      id-token: write
      pull-requests: write
    
    steps:
      - name: 验证时区设置
        run: |
          echo "当前系统时区: $(date +%Z)"
          echo "UTC时间: $(date -u '+%Y-%m-%d %H:%M:%S')"
          echo "北京时间: $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')"
          echo "验证时区偏移: UTC+8 = $(TZ=Asia/Shanghai date '+%z')"
      
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 配置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: 安装依赖包
        run: |
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          else
            echo "警告: requirements.txt 文件不存在"
          fi
      
      - name: 输出调试信息
        run: |
          echo "当前UTC时间: $(date -u '+%Y-%m-%d %H:%M:%S')"
          echo "当前北京时间: $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')"
          echo "事件类型: ${{ github.event_name }}"
          echo "定时表达式: ${{ github.event.schedule || '无' }}"
          echo "手动任务: ${{ github.event.inputs.task || '无' }}"
          echo "当前工作目录: $(pwd)"
          echo "仓库目录内容:"
          ls -la
      
      - name: 确定任务类型和触发方式
        id: set_task
        run: |
          # 设置触发方式环境变量
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "TRIGGER_TYPE=schedule" >> $GITHUB_ENV
            echo "触发方式: 定时任务"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "TRIGGER_TYPE=manual" >> $GITHUB_ENV
            echo "触发方式: 手动触发"
          else
            echo "TRIGGER_TYPE=unknown" >> $GITHUB_ENV
            echo "触发方式: 未知"
          fi
          
          # 确定任务类型
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            if [[ "${{ github.event.schedule }}" == "0 8 * * 1-5" ]]; then
              echo "TASK=crawl_etf_daily" >> $GITHUB_ENV
            elif [[ "${{ github.event.schedule }}" == "0 6 * * 1-5" ]]; then
              echo "TASK=calculate_position" >> $GITHUB_ENV
            elif [[ "${{ github.event.schedule }}" == "0 12 * * 0" ]]; then
              echo "TASK=update_etf_list" >> $GITHUB_ENV
            elif [[ "${{ github.event.schedule }}" == "40 1-6 * * 1-5" ]]; then
              echo "TASK=calculate_arbitrage" >> $GITHUB_ENV
            else
              echo "未知的定时任务: ${{ github.event.schedule }}"
              echo "TASK=unknown" >> $GITHUB_ENV
            fi
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "TASK=${{ github.event.inputs.task }}" >> $GITHUB_ENV
          fi
          
          echo "最终执行任务: $TASK"
          echo "触发方式: $TRIGGER_TYPE"
      
      - name: 创建数据目录
        run: |
          mkdir -p data/etf_daily data/flags data/logs
          chmod -R 777 data/
          echo "数据目录结构:"
          find data/ -type d -exec ls -ld {} \;
      
      - name: 检查是否已推送标志（仅定时任务）
        id: check_flags
        run: |
          # 获取当前北京时间
          BEIJING_DATE=$(TZ=Asia/Shanghai date '+%Y-%m-%d')
          
          # 只有定时触发的任务才检查标志
          if [[ "$TRIGGER_TYPE" == "schedule" ]]; then
            # 检查标志文件是否存在
            if [[ "$TASK" == "calculate_arbitrage" ]]; then
              if [[ -f "data/flags/arbitrage_pushed_${BEIJING_DATE}.txt" ]]; then
                echo "arbitrage_pushed=true" >> $GITHUB_OUTPUT
                echo "检测到套利策略已推送标志，将跳过执行（定时任务）"
              else
                echo "arbitrage_pushed=false" >> $GITHUB_OUTPUT
              fi
            elif [[ "$TASK" == "calculate_position" ]]; then
              if [[ -f "data/flags/position_pushed_${BEIJING_DATE}.txt" ]]; then
                echo "position_pushed=true" >> $GITHUB_OUTPUT
                echo "检测到仓位策略已推送标志，将跳过执行（定时任务）"
              else
                echo "position_pushed=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "无需检查推送标志的任务: $TASK"
            fi
          else
            echo "手动触发任务，跳过标志检查"
          fi
      
      - name: 跳过已推送任务（仅定时任务）
        if: >-
          env.TRIGGER_TYPE == 'schedule' && (
            (steps.check_flags.outputs.arbitrage_pushed == 'true' && env.TASK == 'calculate_arbitrage') ||
            (steps.check_flags.outputs.position_pushed == 'true' && env.TASK == 'calculate_position')
          )
        run: |
          echo "任务 $TASK 今日已推送，跳过执行（定时任务）"
          echo "skip_execution=true" >> $GITHUB_ENV
      
      - name: 执行任务
        id: execute_task
        if: env.skip_execution != 'true'
        env:
          TASK: ${{ env.TASK }}
          TRIGGER_TYPE: ${{ env.TRIGGER_TYPE }}  # 关键：传递触发方式给main.py
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
          TZ: Asia/Shanghai  # 设置时区为北京时间
        run: |
          echo "开始执行任务: $TASK (触发方式: $TRIGGER_TYPE)"
          
          # 创建日志文件（使用北京时间命名）
          BEIJING_TIME=$(date '+%Y%m%d_%H%M%S')
          LOG_FILE="data/logs/task_${TASK}_${BEIJING_TIME}.log"
          echo "日志文件: $LOG_FILE"
          
          # 执行任务并记录日志
          python main.py 2>&1 | tee "$LOG_FILE"
          
          # 检查执行结果
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "任务执行成功"
            echo "task_status=success" >> $GITHUB_OUTPUT
          else
            echo "任务执行失败"
            echo "task_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # 检查生成的文件
          echo "任务执行后的数据目录内容:"
          ls -la data/etf_daily/ || true
          
          file_count=$(find data/etf_daily/ -type f -name "*.csv" 2>/dev/null | wc -l)
          echo "生成的CSV文件数量: $file_count"
          echo "file_count=$file_count" >> $GITHUB_OUTPUT
      
      - name: 拉取最新代码避免冲突
        if: env.skip_execution != 'true'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # 拉取远程最新代码
          echo "拉取远程最新代码..."
          git pull origin main --rebase --autostash || echo "拉取代码失败，继续执行"
      
      - name: 提交数据变更（每保存一个文件就提交一次）
        if: >-
          env.skip_execution != 'true' && 
          steps.execute_task.outputs.task_status == 'success' &&
          (env.TASK == 'crawl_etf_daily' || env.TASK == 'update_etf_list')
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # 1. 提交每个新保存的ETF日线数据文件
          if [[ "$TASK" == "crawl_etf_daily" ]]; then
            echo "【断点续传】开始提交每个ETF日线数据文件..."
            for etf_file in data/etf_daily/*.csv; do
              if [ -f "$etf_file" ]; then
                # 检查文件是否是新创建或已修改
                if ! git diff --quiet HEAD -- "$etf_file"; then
                  echo "检测到变化: $etf_file"
                  git add "$etf_file"
                  
                  # 获取ETF代码
                  etf_code=$(basename "$etf_file" .csv)
                  
                  # 提交单个ETF文件
                  git commit -m "【断点续传】自动更新ETF日线数据: ${etf_code} [${TRIGGER_TYPE}]"
                  echo "已提交: $etf_file"
                  
                  # 立即推送到仓库
                  git push origin main || echo "推送失败，继续处理下一个文件"
                fi
              fi
            done
          fi
          
          # 2. 提交ETF列表文件
          if [[ "$TASK" == "update_etf_list" ]]; then
            echo "【断点续传】提交ETF列表文件..."
            git add data/all_etfs.csv
            if ! git diff --quiet HEAD -- data/all_etfs.csv; then
              git commit -m "【断点续传】自动更新ETF列表 [${TRIGGER_TYPE}]"
              git push origin main || echo "ETF列表推送失败"
              echo "ETF列表提交成功"
            else
              echo "ETF列表无变化，无需提交"
            fi
          fi
          
          # 3. 提交标志文件（如果存在变化）
          if [[ "$TASK" == "calculate_arbitrage" || "$TASK" == "calculate_position" ]]; then
            echo "提交标志文件..."
            git add data/flags/
            if ! git diff --quiet HEAD -- data/flags/; then
              git commit -m "【断点续传】自动更新策略标志文件 [${TRIGGER_TYPE}]"
              git push origin main || echo "标志文件推送失败"
              echo "标志文件提交成功"
            else
              echo "标志文件无变化，无需提交"
            fi
          fi
      
      - name: 任务完成通知
        if: always()
        run: |
          if [ "${{ env.skip_execution }}" == "true" ]; then
            echo "任务 ${{ env.TASK }} 已跳过（定时任务且今日已推送）"
          elif [ "${{ steps.execute_task.outputs.task_status }}" == "success" ]; then
            if [ ${{ steps.execute_task.outputs.file_count }} -gt 0 ]; then
              echo "【GIT-fish-etf】[${{ env.TASK }}]执行成功（触发方式: ${{ env.TRIGGER_TYPE }}），生成${{ steps.execute_task.outputs.file_count }}个文件"
            else
              echo "【GIT-fish-etf】[${{ env.TASK }}]执行成功（触发方式: ${{ env.TRIGGER_TYPE }}），但未生成新文件"
            fi
          else
            echo "【GIT-fish-etf】[${{ env.TASK }}]执行失败（触发方式: ${{ env.TRIGGER_TYPE }}）"
          fi
      
      - name: 失败通知（企业微信）
        if: failure()
        env:
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
        run: |
          if [ -n "$WECOM_WEBHOOK" ]; then
            BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
            UTC_TIME=$(date -u '+%Y-%m-%d %H:%M:%S')
            TRIGGER_TYPE="${{ env.TRIGGER_TYPE }}"
            payload="{\"msgtype\": \"text\", \"text\": {\"content\": \"⚠ 【GIT-fish-etf】[${{ env.TASK }}]执行失败\\n触发方式: ${TRIGGER_TYPE}\\nUTC时间: ${UTC_TIME}\\n北京时间: ${BEIJING_TIME}\\n日志: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}}"
            curl -s -X POST "$WECOM_WEBHOOK" \
              -H "Content-Type: application/json" \
              -d "$payload" || echo "企业微信通知发送失败"
          else
            echo "未设置企业微信webhook，跳过通知"
          fi
