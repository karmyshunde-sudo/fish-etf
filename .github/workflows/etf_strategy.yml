name: ETF数据爬取与策略推送

on:
  schedule:
    # 北京时间对应关系 (UTC+8)
    - cron: '0 8 * * 1-5'   # 日线爬取（16:00 北京时间）
    - cron: '40 1-6 * * 1-5' # 套利计算（多时间点，9:40~14:40 北京时间）
    - cron: '0 6 * * 1-5'   # 仓位策略（14:00 北京时间）
    - cron: '0 12 * * 0'    # ETF列表更新（20:00 北京时间，周日）
  workflow_dispatch:
    inputs:
      task:
        description: '任务类型'
        required: true
        type: choice
        options:
          - 'crawl_etf_daily'
          - 'calculate_arbitrage'
          - 'calculate_position'
          - 'update_etf_list'

jobs:
  run_etf_task:
    if: >-
      (github.event_name == 'schedule') || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.task != '')
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
      id-token: write
      pull-requests: write
    
    steps:
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 配置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: 安装依赖包
        run: |
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          else
            echo "警告: requirements.txt 文件不存在"
          fi
      
      - name: 输出调试信息
        run: |
          echo "当前UTC时间: $(date -u '+%Y-%m-%d %H:%M:%S')"
          echo "当前北京时间: $(date -u -d "+8 hours" '+%Y-%m-%d %H:%M:%S')"
          echo "事件类型: ${{ github.event_name }}"
          echo "定时表达式: ${{ github.event.schedule || '无' }}"
          echo "手动任务: ${{ github.event.inputs.task || '无' }}"
          echo "当前工作目录: $(pwd)"
          echo "仓库目录内容:"
          ls -la
      
      - name: 确定任务类型
        id: set_task
        run: |
          # 处理定时任务
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            if [[ "${{ github.event.schedule }}" == "0 8 * * 1-5" ]]; then
              echo "TASK=crawl_etf_daily" >> $GITHUB_ENV
            elif [[ "${{ github.event.schedule }}" == "0 6 * * 1-5" ]]; then
              echo "TASK=calculate_position" >> $GITHUB_ENV
            elif [[ "${{ github.event.schedule }}" == "0 12 * * 0" ]]; then
              echo "TASK=update_etf_list" >> $GITHUB_ENV
            elif [[ "${{ github.event.schedule }}" == "40 1-6 * * 1-5" ]]; then
              echo "TASK=calculate_arbitrage" >> $GITHUB_ENV
            else
              echo "未知的定时任务: ${{ github.event.schedule }}"
              echo "TASK=unknown" >> $GITHUB_ENV
            fi
          # 处理手动触发任务
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "TASK=${{ github.event.inputs.task }}" >> $GITHUB_ENV
          fi
          
          echo "最终执行任务: $TASK"
      
      - name: 创建数据目录
        run: |
          mkdir -p data/etf_daily data/flags data/logs
          chmod -R 777 data/
          echo "数据目录结构:"
          find data/ -type d -exec ls -ld {} \;
      
      - name: 检查是否已推送标志
        id: check_flags
        run: |
          # 检查标志文件是否存在（模拟主程序中的检查逻辑）
          if [[ "$TASK" == "calculate_arbitrage" ]]; then
            if [[ -f "data/flags/arbitrage_pushed.flag" ]]; then
              echo "arbitrage_pushed=true" >> $GITHUB_OUTPUT
              echo "检测到套利策略已推送标志，将跳过执行"
            else
              echo "arbitrage_pushed=false" >> $GITHUB_OUTPUT
            fi
          elif [[ "$TASK" == "calculate_position" ]]; then
            if [[ -f "data/flags/position_pushed.flag" ]]; then
              echo "position_pushed=true" >> $GITHUB_OUTPUT
              echo "检测到仓位策略已推送标志，将跳过执行"
            else
              echo "position_pushed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "无需检查推送标志的任务: $TASK"
          fi
      
      - name: 跳过已推送任务
        if: >-
          (steps.check_flags.outputs.arbitrage_pushed == 'true' && env.TASK == 'calculate_arbitrage') ||
          (steps.check_flags.outputs.position_pushed == 'true' && env.TASK == 'calculate_position')
        run: |
          echo "任务 $TASK 今日已推送，跳过执行"
          echo "skip_execution=true" >> $GITHUB_ENV
      
      - name: 执行任务
        id: execute_task
        if: env.skip_execution != 'true'
        env:
          TASK: ${{ env.TASK }}
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
        run: |
          echo "开始执行任务: $TASK"
          
          # 创建日志文件
          LOG_FILE="data/logs/task_${TASK}_$(date +%Y%m%d_%H%M%S).log"
          echo "日志文件: $LOG_FILE"
          
          # 执行任务并记录日志
          python main.py 2>&1 | tee "$LOG_FILE"
          
          # 检查执行结果
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "任务执行成功"
            echo "task_status=success" >> $GITHUB_OUTPUT
          else
            echo "任务执行失败"
            echo "task_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # 检查生成的文件
          echo "任务执行后的数据目录内容:"
          ls -la data/etf_daily/ || true
          
          file_count=$(find data/etf_daily/ -type f -name "*.csv" 2>/dev/null | wc -l)
          echo "生成的CSV文件数量: $file_count"
          echo "file_count=$file_count" >> $GITHUB_OUTPUT
      
      - name: 拉取最新代码避免冲突
        if: env.skip_execution != 'true'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # 拉取远程最新代码
          echo "拉取远程最新代码..."
          git pull origin main --rebase --autostash || echo "拉取代码失败，继续执行"
      
      - name: 提交数据变更
        if: >-
          env.skip_execution != 'true' && 
          steps.execute_task.outputs.file_count != '0' &&
          steps.execute_task.outputs.task_status == 'success'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # 添加所有数据文件
          git add data/etf_daily/ data/flags/ data/logs/ data/*.csv --force
          
          echo "=== 暂存区文件 ==="
          git status --porcelain
          echo "=================="
          
          # 检查是否有变更需要提交
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "自动更新数据[$TASK]: $(date -u -d "+8 hours" '+%Y-%m-%d %H:%M')"
            git push origin main
            echo "数据提交成功"
          else
            echo "无数据变更需要提交"
          fi
      
      - name: 处理提交冲突
        if: >-
          env.skip_execution != 'true' && 
          steps.execute_task.outputs.file_count != '0' &&
          failure()
        run: |
          echo "处理提交冲突..."
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # 尝试拉取最新代码并合并
          git pull origin main --rebase --autostash || echo "拉取代码失败"
          
          # 再次尝试提交
          git add data/etf_daily/ data/flags/ data/logs/ data/*.csv --force
          
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "自动更新数据[$TASK]: $(date -u -d "+8 hours" '+%Y-%m-%d %H:%M') [冲突解决]"
            git push origin main || echo "推送失败"
            echo "冲突解决后提交成功"
          else
            echo "无数据变更需要提交"
          fi
      
      - name: 任务完成通知
        if: always()
        run: |
          if [ "${{ env.skip_execution }}" == "true" ]; then
            echo "任务 ${{ env.TASK }} 已跳过（今日已推送）"
          elif [ "${{ steps.execute_task.outputs.task_status }}" == "success" ]; then
            if [ ${{ steps.execute_task.outputs.file_count }} -gt 0 ]; then
              echo "【GIT-fish-etf】[${{ env.TASK }}]执行成功，生成${{ steps.execute_task.outputs.file_count }}个文件"
            else
              echo "【GIT-fish-etf】[${{ env.TASK }}]执行成功，但未生成新文件"
            fi
          else
            echo "【GIT-fish-etf】[${{ env.TASK }}]执行失败"
          fi
      
      - name: 失败通知（企业微信）
        if: failure()
        env:
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
          TASK: ${{ env.TASK }}
        run: |
          if [ -n "$WECOM_WEBHOOK" ]; then
            beijing_time=$(date -u -d "+8 hours" '+%Y-%m-%d %H:%M:%S')
            payload="{\"msgtype\": \"text\", \"text\": {\"content\": \"⚠️ 【GIT-fish-etf】[${TASK}]执行失败\\n时间: ${beijing_time}\\n日志: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}}"
            curl -s -X POST "$WECOM_WEBHOOK" \
              -H "Content-Type: application/json" \
              -d "$payload" || echo "企业微信通知发送失败"
          else
            echo "未设置企业微信webhook，跳过通知"
          fi
