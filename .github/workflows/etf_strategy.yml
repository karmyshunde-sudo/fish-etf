name: ETF仓位折溢套利

on:
  schedule:
    # GitHub Actions使用UTC时区，注释中表示对应的北京时间
    - cron: '0 8 * * 1-5'   # UTC 08:00 = 北京时间 16:00 (日线爬取)
    - cron: '*/5 1-6 * * 1-5' # UTC 01:00-06:00 = 北京时间 09:00-14:00 (套利计算，每5分钟一次)
    - cron: '0 6 * * 1-5'   # UTC 06:00 = 北京时间 14:00 (仓位策略)
    - cron: '0 12 * * 0'    # UTC 12:00 = 北京时间 20:00 (ETF列表更新，周日)
  workflow_dispatch:
    inputs:
      task:
        description: '任务类型'
        required: true
        type: choice
        options:
          - 'crawl_etf_daily'
          - 'calculate_arbitrage'
          - 'calculate_position'
          - 'update_etf_list'
          - 'clean_daily_data'
          - 'clean_arbitrage_data'
          - 'clean_trade_records'
          - 'clean_numeric_csv'
          - 'show_akshare_info'  # 新增：显示AkShare信息

jobs:
  run_etf_task:
    if: >-
      (github.event_name == 'schedule') || 
      (github.event_name == 'workflow_dispatch' && 
       github.event.inputs.task != '' &&
       github.event.inputs.task != 'clean_daily_data' &&
       github.event.inputs.task != 'clean_arbitrage_data' &&
       github.event.inputs.task != 'clean_trade_records' &&
       github.event.inputs.task != 'clean_numeric_csv' &&
       github.event.inputs.task != 'show_akshare_info')
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
      id-token: write
      pull-requests: write
    
    steps:
      - name: 验证时区设置
        run: |
          echo "当前系统时区: $(date +%Z)"
          echo "UTC时间: $(date -u '+%Y-%m-%d %H:%M:%S')"
          echo "北京时间: $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')"
          echo "验证时区偏移: UTC+8 = $(TZ=Asia/Shanghai date '+%z')"
      
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 配置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: 安装依赖包
        run: |
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          else
            echo "警告: requirements.txt 文件不存在"
          fi
      
      - name: 输出调试信息
        run: |
          echo "当前UTC时间: $(date -u '+%Y-%m-%d %H:%M:%S')"
          echo "当前北京时间: $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')"
          echo "事件类型: ${{ github.event_name }}"
          echo "定时表达式: ${{ github.event.schedule || '无' }}"
          echo "手动任务: ${{ github.event.inputs.task || '无' }}"
          echo "当前工作目录: $(pwd)"
          echo "仓库目录内容:"
          ls -la
      
      - name: 确定任务类型和触发方式
        id: set_task
        run: |
          # 设置触发方式环境变量
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "TRIGGER_TYPE=schedule" >> $GITHUB_ENV
            echo "触发方式: 定时任务"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "TRIGGER_TYPE=manual" >> $GITHUB_ENV
            echo "触发方式: 手动触发"
          else
            echo "TRIGGER_TYPE=unknown" >> $GITHUB_ENV
            echo "触发方式: 未知"
          fi
          
          # 确定任务类型
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            if [[ "${{ github.event.schedule }}" == "0 8 * * 1-5" ]]; then
              echo "TASK=crawl_etf_daily" >> $GITHUB_ENV
            elif [[ "${{ github.event.schedule }}" == "*/5 1-6 * * 1-5" ]]; then
              echo "TASK=calculate_arbitrage" >> $GITHUB_ENV
            elif [[ "${{ github.event.schedule }}" == "0 6 * * 1-5" ]]; then
              echo "TASK=calculate_position" >> $GITHUB_ENV
            elif [[ "${{ github.event.schedule }}" == "0 12 * * 0" ]]; then
              echo "TASK=update_etf_list" >> $GITHUB_ENV
            else
              echo "未知的定时任务: ${{ github.event.schedule }}"
              echo "TASK=unknown" >> $GITHUB_ENV
            fi
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "TASK=${{ github.event.inputs.task }}" >> $GITHUB_ENV
          fi
          
          echo "最终执行任务: $TASK"
          echo "触发方式: $TRIGGER_TYPE"
      
      - name: 创建数据目录
        run: |
          mkdir -p data/etf_daily data/flags data/logs data/arbitrage
          chmod -R 777 data/
          echo "数据目录结构:"
          find data/ -type d -exec ls -ld {} \;
      
      - name: 检查是否已推送标志（仅定时任务）
        id: check_flags
        run: |
          # 获取当前北京时间
          BEIJING_DATE=$(TZ=Asia/Shanghai date '+%Y-%m-%d')
          
          # 只有定时触发的任务才检查标志
          if [[ "$TRIGGER_TYPE" == "schedule" ]]; then
            # 检查标志文件是否存在
            if [[ "$TASK" == "calculate_position" ]]; then
              if [[ -f "data/flags/position_pushed_${BEIJING_DATE}.txt" ]]; then
                echo "position_pushed=true" >> $GITHUB_OUTPUT
                echo "检测到仓位策略已推送标志，将跳过执行（定时任务）"
              else
                echo "position_pushed=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "无需检查推送标志的任务: $TASK"
            fi
          else
            echo "手动触发任务，跳过标志检查"
          fi
      
      - name: 跳过已推送任务（仅定时任务）
        if: >-
          env.TRIGGER_TYPE == 'schedule' && 
          (steps.check_flags.outputs.position_pushed == 'true' && env.TASK == 'calculate_position')
        run: |
          echo "任务 $TASK 今日已推送，跳过执行（定时任务）"
          echo "skip_execution=true" >> $GITHUB_ENV
      
      - name: 执行任务
        id: execute_task
        if: env.skip_execution != 'true'
        env:
          TASK: ${{ env.TASK }}
          TRIGGER_TYPE: ${{ env.TRIGGER_TYPE }}
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
          TZ: Asia/Shanghai
        run: |
          echo "开始执行任务: $TASK (触发方式: $TRIGGER_TYPE)"
          
          # 创建日志文件
          BEIJING_TIME=$(date '+%Y%m%d_%H%M%S')
          LOG_FILE="data/logs/task_${TASK}_${BEIJING_TIME}.log"
          echo "日志文件: $LOG_FILE"
          
          # 执行任务并记录日志
          python main.py $TASK 2>&1 | tee "$LOG_FILE"
          
          # 检查执行结果
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "任务执行成功"
            echo "task_status=success" >> $GITHUB_OUTPUT
          else
            echo "任务执行失败"
            echo "task_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
      
      - name: 拉取最新代码避免冲突
        if: env.skip_execution != 'true'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # 拉取远程最新代码
          echo "拉取远程最新代码..."
          git pull origin main --rebase --autostash || echo "拉取代码失败，继续执行"
      
      - name: 提交数据变更
        if: >-
          env.skip_execution != 'true' && 
          steps.execute_task.outputs.task_status == 'success' &&
          (env.TASK == 'crawl_etf_daily' || env.TASK == 'update_etf_list' || env.TASK == 'calculate_arbitrage')
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # 提交ETF日线数据
          if [[ "$TASK" == "crawl_etf_daily" ]]; then
            echo "【断点续传】提交ETF日线数据..."
            git add data/etf_daily/
            if ! git diff --quiet HEAD -- data/etf_daily/; then
              git commit -m "【断点续传】自动更新ETF日线数据 [${TRIGGER_TYPE}]"
              git push origin main || echo "ETF日线数据推送失败"
              echo "ETF日线数据提交成功"
            else
              echo "ETF日线数据无变化，无需提交"
            fi
          fi
          
          # 提交ETF列表文件
          if [[ "$TASK" == "update_etf_list" ]]; then
            echo "【断点续传】提交ETF列表文件..."
            git add data/all_etfs.csv
            if ! git diff --quiet HEAD -- data/all_etfs.csv; then
              git commit -m "【断点续传】自动更新ETF列表 [${TRIGGER_TYPE}]"
              git push origin main || echo "ETF列表推送失败"
              echo "ETF列表提交成功"
            else
              echo "ETF列表无变化，无需提交"
            fi
          fi
          
          # 提交套利数据文件
          if [[ "$TASK" == "calculate_arbitrage" ]]; then
            echo "【增量推送】提交套利数据文件..."
            git add data/arbitrage/
            if ! git diff --quiet HEAD -- data/arbitrage/; then
              git commit -m "【增量推送】自动更新套利数据文件 [${TRIGGER_TYPE}]"
              git push origin main || echo "套利数据文件推送失败"
              echo "套利数据文件提交成功"
            else
              echo "套利数据文件无变化，无需提交"
            fi
            
            echo "【增量推送】提交折价状态文件..."
            if [ -f "data/flags/discount_status.json" ]; then
              git add data/flags/discount_status.json
              if ! git diff --quiet HEAD -- data/flags/discount_status.json; then
                git commit -m "【增量推送】自动更新折价状态记录 [${TRIGGER_TYPE}]"
                git push origin main || echo "折价状态记录推送失败"
                echo "折价状态记录提交成功"
              else
                echo "折价状态记录无变化，无需提交"
              fi
            else
              echo "折价状态记录文件不存在，跳过提交"
            fi
            
            echo "【增量推送】提交溢价状态文件..."
            if [ -f "data/flags/premium_status.json" ]; then
              git add data/flags/premium_status.json
              if ! git diff --quiet HEAD -- data/flags/premium_status.json; then
                git commit -m "【增量推送】自动更新溢价状态记录 [${TRIGGER_TYPE}]"
                git push origin main || echo "溢价状态记录推送失败"
                echo "溢价状态记录提交成功"
              else
                echo "溢价状态记录无变化，无需提交"
              fi
            else
              echo "溢价状态记录文件不存在，跳过提交"
            fi
          fi
          
          # 提交其他标志文件
          if [[ "$TASK" == "calculate_position" ]]; then
            echo "提交仓位策略标志文件..."
            git add data/flags/
            if ! git diff --quiet HEAD -- data/flags/; then
              git commit -m "【断点续传】自动更新策略标志文件 [${TRIGGER_TYPE}]"
              git push origin main || echo "标志文件推送失败"
              echo "标志文件提交成功"
            else
              echo "标志文件无变化，无需提交"
            fi
          fi
      
      - name: 任务完成通知
        if: always()
        run: |
          if [ "${{ env.skip_execution }}" == "true" ]; then
            echo "任务 ${{ env.TASK }} 已跳过（定时任务且今日已推送）"
          elif [ "${{ steps.execute_task.outputs.task_status }}" == "success" ]; then
            echo "【GIT-fish-etf】[${{ env.TASK }}]执行成功（触发方式: ${{ env.TRIGGER_TYPE }}）"
          else
            echo "【GIT-fish-etf】[${{ env.TASK }}]执行失败（触发方式: ${{ env.TRIGGER_TYPE }}）"
          fi
      
      - name: 失败通知（企业微信）
        if: failure()
        env:
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
        run: |
          if [ -n "$WECOM_WEBHOOK" ]; then
            BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
            UTC_TIME=$(date -u '+%Y-%m-%d %H:%M:%S')
            TRIGGER_TYPE="${{ env.TRIGGER_TYPE }}"
            TASK="${{ env.TASK }}"
            
            # 获取任务执行日志链接
            LOG_URL="https://github.com/  ${{ github.repository }}/actions/runs/${{ github.run_id }}"
            
            # 构建消息内容
            payload="{\"msgtype\": \"text\", \"text\": {\"content\": \"⚠️ 【GIT-fish-etf】[${TASK}]执行失败\\n触发方式: ${TRIGGER_TYPE}\\nUTC时间: ${UTC_TIME}\\n北京时间: ${BEIJING_TIME}\\n日志链接: ${LOG_URL}\\n\\n注意：套利增量推送任务不会因已推送而跳过，会持续检查新机会\"}}"
            
            # 发送企业微信通知
            curl -s -X POST "$WECOM_WEBHOOK" \
              -H "Content-Type: application/json" \
              -d "$payload" || echo "企业微信通知发送失败"
          else
            echo "未设置企业微信webhook，跳过通知"
          fi

  manual-clean-daily-data:
    name: 手动清理日线数据
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'clean_daily_data'
    permissions:
      contents: write
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4
        
      - name: 设置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          else
            echo "警告: requirements.txt 文件不存在"
          fi
          
      - name: 清理日线数据文件
        run: |
          echo "正在清理日线数据文件..."
          rm -rf data/etf_daily/*.csv
          echo "日线数据文件已清理完成"
          
      - name: 提交清理变更
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # 提交数据变更
          git add data/etf_daily/
          git commit -m "【手动清理】清除ETF日线数据文件"
          git push origin main || echo "数据清理提交失败"
          
      - name: 发送清理完成通知
        env:
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
        run: |
          if [ -n "$WECOM_WEBHOOK" ]; then
            BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
            UTC_TIME=$(date -u '+%Y-%m-%d %H:%M:%S')
            
            # 构建消息内容
            payload="{\"msgtype\": \"text\", \"text\": {\"content\": \"✅ 【手动清理】ETF日线数据文件已清理完成\\nUTC时间: ${UTC_TIME}\\n北京时间: ${BEIJING_TIME}\"}}"
            
            # 发送企业微信通知
            curl -s -X POST "$WECOM_WEBHOOK" \
              -H "Content-Type: application/json" \
              -d "$payload" || echo "企业微信通知发送失败"
          else
            echo "未设置企业微信webhook，跳过通知"
          fi

  manual-clean-arbitrage-data:
    name: 手动清理套利数据
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'clean_arbitrage_data'
    permissions:
      contents: write
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4
        
      - name: 设置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          else
            echo "警告: requirements.txt 文件不存在"
          fi
          
      - name: 清理套利数据文件
        run: |
          echo "正在清理套利数据文件..."
          rm -rf data/arbitrage/*.csv
          echo "套利数据文件已清理完成"
          
      - name: 提交清理变更
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # 提交数据变更
          git add data/arbitrage/
          git commit -m "【手动清理】清除套利数据文件"
          git push origin main || echo "数据清理提交失败"
          
      - name: 发送清理完成通知
        env:
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
        run: |
          if [ -n "$WECOM_WEBHOOK" ]; then
            BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
            UTC_TIME=$(date -u '+%Y-%m-%d %H:%M:%S')
            
            # 构建消息内容
            payload="{\"msgtype\": \"text\", \"text\": {\"content\": \"✅ 【手动清理】套利数据文件已清理完成\\nUTC时间: ${UTC_TIME}\\n北京时间: ${BEIJING_TIME}\"}}"
            
            # 发送企业微信通知
            curl -s -X POST "$WECOM_WEBHOOK" \
              -H "Content-Type: application/json" \
              -d "$payload" || echo "企业微信通知发送失败"
          else
            echo "未设置企业微信webhook，跳过通知"
          fi

  manual-clean-trade-records:
    name: 手动清理交易记录
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'clean_trade_records'
    permissions:
      contents: write
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4
        
      - name: 设置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          else
            echo "警告: requirements.txt 文件不存在"
          fi
          
      - name: 清理交易记录文件
        run: |
          echo "正在清理交易记录文件..."
          rm -f data/trade_records.csv
          echo "交易记录文件已清理完成"
          
      - name: 提交清理变更
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # 提交数据变更
          git add data/trade_records.csv
          git commit -m "【手动清理】清除交易记录文件"
          git push origin main || echo "数据清理提交失败"
          
      - name: 发送清理完成通知
        env:
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
        run: |
          if [ -n "$WECOM_WEBHOOK" ]; then
            BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
            UTC_TIME=$(date -u '+%Y-%m-%d %H:%M:%S')
            
            # 构建消息内容
            payload="{\"msgtype\": \"text\", \"text\": {\"content\": \"✅ 【手动清理】交易记录文件已清理完成\\nUTC时间: ${UTC_TIME}\\n北京时间: ${BEIJING_TIME}\"}}"
            
            # 发送企业微信通知
            curl -s -X POST "$WECOM_WEBHOOK" \
              -H "Content-Type: application/json" \
              -d "$payload" || echo "企业微信通知发送失败"
          else
            echo "未设置企业微信webhook，跳过通知"
          fi

  manual-clean-numeric-csv:
    name: 手动清理纯数字CSV文件
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'clean_numeric_csv'
    permissions:
      contents: write
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4
        
      - name: 设置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          else
            echo "警告: requirements.txt 文件不存在"
          fi
          
      - name: 清理纯数字CSV文件
        run: |
          echo "正在清理data/目录下纯数字CSV文件..."
          # 查找并删除data/目录下文件名只有数字的CSV文件
          find data/ -type f -name '[0-9]*.csv' -exec echo "将删除: {}" \; -exec rm -f {} \;
          echo "纯数字CSV文件已清理完成"
          
      - name: 提交清理变更
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # 提交数据变更
          git add -u data/
          git commit -m "【手动清理】清除纯数字CSV文件"
          git push origin main || echo "数据清理提交失败"
          
      - name: 发送清理完成通知
        env:
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
        run: |
          if [ -n "$WECOM_WEBHOOK" ]; then
            BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
            UTC_TIME=$(date -u '+%Y-%m-%d %H:%M:%S')
            
            # 构建消息内容
            payload="{\"msgtype\": \"text\", \"text\": {\"content\": \"✅ 【手动清理】纯数字CSV文件已清理完成\\nUTC时间: ${UTC_TIME}\\n北京时间: ${BEIJING_TIME}\"}}"
            
            # 发送企业微信通知
            curl -s -X POST "$WECOM_WEBHOOK" \
              -H "Content-Type: application/json" \
              -d "$payload" || echo "企业微信通知发送失败"
          else
            echo "未设置企业微信webhook，跳过通知"
          fi

  show-akshare-info:
    name: 显示AkShare信息
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'show_akshare_info'
    permissions:
      contents: write
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4
        
      - name: 设置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          else
            echo "警告: requirements.txt 文件不存在"
          fi
          
      - name: 获取AkShare信息并保存
        run: |
          # 获取北京时间
          BEIJING_DATE=$(TZ=Asia/Shanghai date '+%Y%m%d')
          
          # 创建Python脚本
          cat > get_akshare_info.py << 'END_OF_SCRIPT'
          import akshare as ak
          import inspect
          import os
          import logging
          from datetime import datetime
          import traceback

          # 配置日志
          logging.basicConfig(level=logging.ERROR)

          # 获取akshare版本
          version = ak.__version__

          # 获取所有可用函数
          functions = []
          for name, obj in inspect.getmembers(ak):
              if inspect.isfunction(obj) and not name.startswith('_'):
                  functions.append(name)

          # 准备输出内容
          output = f"AkShare Version: {version}\\n"
          output += f"Total Functions: {len(functions)}\\n\\n"
          output += "=" * 50 + "\\n"
          output += "Available Functions and Their Columns\\n"
          output += "=" * 50 + "\\n\\n"

          # 获取每个函数返回的列名
          for func_name in sorted(functions):
              try:
                  func = getattr(ak, func_name)
        
                  # 尝试调用函数
                  try:
                      # 尝试无参数调用
                      result = func()
                  except TypeError:
                      # 如果函数需要参数，尝试一些常见参数
                      if func_name == 'fund_etf_hist_sina':
                          result = ak.fund_etf_hist_sina(symbol="etf")
                      elif func_name == 'fund_etf_spot_em':
                          result = ak.fund_etf_spot_em()
                      elif func_name == 'fund_aum_em':
                          result = ak.fund_aum_em()
                      elif func_name == 'stock_zh_a_hist':
                          result = ak.stock_zh_a_hist(symbol="sh000001", period="daily", start_date="20200101", end_date="20200110")
                      elif func_name == 'stock_zh_a_hist_min':
                          # 简化长行，避免YAML解析问题
                          result = ak.stock_zh_a_hist_min(
                              symbol="sh000001", 
                              period="5", 
                              start_date="2020-01-01 09:30:00", 
                              end_date="2020-01-01 15:00:00"
                          )
                        elif func_name == 'stock_zh_a_hist_hfq':
                            result = ak.stock_zh_a_hist_hfq(symbol="sh000001", period="daily", start_date="20200101", end_date="20200110")
                        elif func_name == 'stock_zh_a_hist_hfq_em':
                            result = ak.stock_zh_a_hist_hfq_em(symbol="sh000001", period="daily", start_date="20200101", end_date="20200110")
                        elif func_name == 'stock_zh_a_minute':
                            result = ak.stock_zh_a_minute(symbol="sh000001", period="5", adjust="qfq")
                        elif func_name == 'stock_zh_a_daily':
                            result = ak.stock_zh_a_daily(symbol="sh000001", adjust="qfq")
                        elif func_name == 'stock_zh_a_spot_em':
                            result = ak.stock_zh_a_spot_em()
                        elif func_name == 'stock_zh_a_hist':
                            result = ak.stock_zh_a_hist(symbol="sh000001", period="daily", start_date="20200101", end_date="20200110")
                        elif func_name == 'fund_etf_hist_em':
                            result = ak.fund_etf_hist_em()
                        elif func_name == 'fund_etf_iopv_em':
                            result = ak.fund_etf_iopv_em()
                        else:
                            result = None
        
                  # 如果结果是DataFrame，获取列名
                  if result is not None and hasattr(result, 'columns'):
                      columns = ", ".join(result.columns)
                      output += f"{func_name}:\\n"
                      output += f"  Columns: {columns}\\n\\n"
                  else:
                      output += f"{func_name}:\\n"
                      output += "  Result: DataFrame not returned or function requires specific parameters\\n\\n"
              except Exception as e:
                  output += f"{func_name}:\\n"
                  output += f"  Error: {str(e)}\\n"
                  output += f"  Traceback: {traceback.format_exc()}\\n\\n"

          # 获取当前北京时间
          beijing_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

          # 添加时间戳
          output += "=" * 50 + "\\n"
          output += f"Generated on: {beijing_time} (Beijing Time)\\n"
          output += "=" * 50 + "\\n"

          # 保存到文件
          file_name = f"{BEIJING_DATE}akshare_info.txt"
          output_dir = "data/flags"

          # 确保目录存在
          os.makedirs(output_dir, exist_ok=True)

          # 写入文件
          with open(os.path.join(output_dir, file_name), "w", encoding="utf-8") as f:
              f.write(output)

          print(f"AkShare信息已保存到 {output_dir}/{file_name}")
          END_OF_SCRIPT
          
          # 运行Python脚本
          python get_akshare_info.py
          
          # 检查文件是否创建成功
          if [ -f "data/flags/${BEIJING_DATE}akshare_info.txt" ]; then
            echo "文件创建成功"
          else
            echo "文件创建失败"
            exit 1
          fi
          
      - name: 提交AkShare信息文件
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # 提交数据变更
          git add data/flags/${BEIJING_DATE}akshare_info.txt
          git commit -m "【手动任务】更新AkShare信息文件"
          git push origin main || echo "AkShare信息文件提交失败"
          
      - name: 发送完成通知
        env:
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
        run: |
          if [ -n "$WECOM_WEBHOOK" ]; then
            BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
            UTC_TIME=$(date -u '+%Y-%m-%d %H:%M:%S')
            BEIJING_DATE=$(TZ=Asia/Shanghai date '+%Y%m%d')
            
            # 构建消息内容
            payload="{\"msgtype\": \"text\", \"text\": {\"content\": \"✅ 【手动任务】AkShare信息已生成\\nUTC时间: ${UTC_TIME}\\n北京时间: ${BEIJING_TIME}\\n文件名: ${BEIJING_DATE}akshare_info.txt\"}}"
            
            # 发送企业微信通知
            curl -s -X POST "$WECOM_WEBHOOK" \
              -H "Content-Type: application/json" \
              -d "$payload" || echo "企业微信通知发送失败"
          else
            echo "未设置企业微信webhook，跳过通知"
          fi
