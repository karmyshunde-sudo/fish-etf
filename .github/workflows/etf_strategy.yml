name: ETF数据爬取与策略推送

on:
  schedule:
    - cron: '0 8 * * 1-5'   # 日线爬取（16:00 北京时间）
    - cron: '40 1-6 * * 1-5' # 套利计算（多时间点，9:40~14:40 北京时间）
    - cron: '0 6 * * 1-5'   # 仓位策略（14:00 北京时间）
    - cron: '0 12 * * 0'    # ETF列表更新（20:00 北京时间，周日）
  workflow_dispatch:
    inputs:
      task:
        description: '任务类型'
        required: true
        type: choice
        options:
          - 'crawl_etf_daily'
          - 'calculate_arbitrage'
          - 'calculate_position'
          - 'update_etf_list'

jobs:
  run_etf_task:
    if: >-
      (github.event_name == 'schedule') || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.task != '')
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
      id-token: write
      pull-requests: write
    
    steps:
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 配置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: 安装依赖包
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: 输出调试信息
        run: |
          set -euo pipefail
          echo "当前北京时间: $(date -u -d "+8 hours" '+%Y-%m-%d %H:%M:%S')"
          echo "事件类型: ${{ github.event_name }}"
          echo "定时表达式: ${{ github.event.schedule || '无' }}"
          echo "手动任务: ${{ github.event.inputs.task || '无' }}"
          echo "当前工作目录: $(pwd)"
          echo "仓库目录内容: $(ls -la)"
      
      - name: 确定任务类型
        id: set_task
        run: |
          set -euo pipefail
          if [[ "${{ github.event.schedule }}" == "0 8 * * 1-5" ]]; then
            echo "TASK=crawl_etf_daily" >> $GITHUB_ENV
          elif [[ "${{ github.event.schedule }}" == "0 6 * * 1-5" ]]; then
            echo "TASK=calculate_position" >> $GITHUB_ENV
          elif [[ "${{ github.event.schedule }}" == "0 12 * * 0" ]]; then
            echo "TASK=update_etf_list" >> $GITHUB_ENV
          elif [[ "${{ github.event.schedule }}" =~ "40 [1-6] * * 1-5" ]]; then
            echo "TASK=calculate_arbitrage" >> $GITHUB_ENV
          else
            echo "TASK=${{ github.event.inputs.task }}" >> $GITHUB_ENV
          fi
          echo "最终执行任务: ${{ env.TASK }}"
      
      - name: 创建数据目录
        run: |
          set -euo pipefail
          mkdir -p data/etf_daily data/flags data/logs
          chmod -R 777 data/
          echo "数据目录权限:"
          ls -ld data/
          ls -ld data/etf_daily/
          echo "数据目录内容（初始）:"
          ls -la data/etf_daily/
      
      - name: 执行任务
        id: execute_task
        env:
          TASK: ${{ env.TASK }}
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
        run: |
          set -euo pipefail
          echo "开始执行任务: $TASK"
          python main.py 2>&1 | tee "data/logs/task_${TASK}_$(date +%Y%m%d_%H%M%S).log"
          
          echo "任务执行后的数据目录内容:"
          ls -la data/etf_daily/
          
          file_count=$(find data/etf_daily/ -type f -name "*.csv" 2>/dev/null | wc -l)
          echo "生成的CSV文件数量: $file_count"
          echo "file_count=$file_count" >> $GITHUB_OUTPUT
          
          if [ $file_count -eq 0 ]; then
            echo "警告: 未检测到CSV文件"
          fi
      
      - name: 先提交变更再拉取最新代码（处理冲突）
        run: |
          set -euo pipefail
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # 检查是否有未提交的更改
          if [ -n "$(git status --porcelain data/)" ]; then
            echo "检测到数据目录有未提交的更改，先提交这些更改"
            git add data/
            git commit -m "自动提交任务生成的临时变更: ${{ env.TASK }}"
          fi
          
          # 拉取远程最新代码
          echo "拉取远程最新代码..."
          git pull origin main --rebase
      
      - name: 提交数据
        if: steps.execute_task.outputs.file_count > 0
        run: |
          set -euo pipefail
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          git add data/etf_daily/ data/flags/ data/logs/ data/*.csv --force
          
          echo "=== 暂存区文件 ==="
          git status --porcelain
          echo "=================="
          
          git commit -m "自动更新数据[${{ env.TASK }}]: $(date -u -d "+8 hours" '+%Y-%m-%d %H:%M')"
          git push origin main || (echo "推送失败，强制重试..." && git push origin main --force-with-lease)
      
      - name: 处理提交失败
        if: >-
          steps.execute_task.outputs.file_count > 0 && 
          failure()
        run: |
          set -euo pipefail
          echo "提交失败，强制推送..."
          git push origin main --force-with-lease
      
      - name: 任务完成通知
        run: |
          if [ ${{ steps.execute_task.outputs.file_count }} -gt 0 ]; then
            echo "ETF任务[${{ env.TASK }}]执行成功，生成${{ steps.execute_task.outputs.file_count }}个文件"
          else
            echo "ETF任务[${{ env.TASK }}]未生成新文件"
          fi
      
      - name: 失败通知（企业微信）
        if: failure()
        env:
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
          TASK: ${{ env.TASK }}
        run: |
          set -euo pipefail
          if [ -n "$WECOM_WEBHOOK" ]; then
            beijing_time=$(date -u -d "+8 hours" '+%Y-%m-%d %H:%M:%S')
            payload="{\"msgtype\": \"text\", \"text\": {\"content\": \"⚠️ ETF任务[${TASK}]执行失败\\n时间: ${beijing_time}\\n日志: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}}"
            curl -X POST "$WECOM_WEBHOOK" \
              -H "Content-Type: application/json" \
              -d "$payload"
          fi
