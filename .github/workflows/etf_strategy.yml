name: ETF仓位折溢套利

on:
  schedule:
    - cron: '0 14 * * 1-5'   # UTC 14:00 = 北京时间 22:00 (日线爬取)
    - cron: '*/5 2-7 * * 1-5' # UTC 02:00-07:00 = 北京时间 10:00-15:00 (套利计算)
    - cron: '30 5 * * 1-5'    # UTC 05:30 = 北京时间 13:30 (仓位策略)
    - cron: '0 1 * * 0'       # UTC 01:00 = 北京时间 09:00 (ETF列表更新)
    - cron: '0 9 * * *'       # UTC 09:00 = 北京时间 17:00 (ETF Yes/No)
    - cron: '0 10 * * 1-5'    # UTC 10:00 = 北京时间 18:00 (个股趋势策略)
  workflow_dispatch:
    inputs:
      task:
        description: '任务类型'
        required: true
        type: choice
        options:
          - 'update_etf_list'
          - 'etf_yesno'
          - 'stock_fourty'
          - 'crawl_etf_daily'
          - 'calculate_arbitrage'
          - 'calculate_position'
          - 'clean_daily_data'
          - 'clean_arbitrage_data'
          - 'clean_trade_records'
          - 'clean_numeric_csv'
          - 'show_akshare_info'
      interface_name:
        description: 'AkShare接口名称（可选）'
        required: false
        type: string
        default: ''

jobs:
  run_etf_task:
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.task != '')
    runs-on: ubuntu-latest
    timeout-minutes: 1000
    permissions:
      contents: write
      id-token: write
      pull-requests: write
    
    steps:
      - name: 显示任务信息
        run: |
          echo "正在执行通用任务流程"
          echo "事件类型: ${{ github.event_name }}"
          echo "触发任务: ${{ github.event.inputs.task || '定时任务' }}"

      - name: 验证时区设置
        run: |
          echo "时区验证: $(date -u '+%Y-%m-%d %H:%M:%S' UTC) | $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S' CST)"

      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 配置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: 安装依赖包
        run: |
          pip install -r requirements.txt || echo "警告: requirements.txt 文件不存在"

      - name: 确定任务类型
        id: set_task
        run: |
          TRIGGER_TYPE="${{ github.event_name == 'schedule' && 'schedule' || 'manual' }}"
          echo "TRIGGER_TYPE=$TRIGGER_TYPE" >> $GITHUB_ENV
          
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            case "${{ github.event.schedule }}" in
              "0 14 * * 1-5") TASK="crawl_etf_daily" ;;
              "*/5 2-7 * * 1-5") TASK="calculate_arbitrage" ;;
              "30 5 * * 1-5") TASK="calculate_position" ;;
              "0 1 * * 0") TASK="update_etf_list" ;;
              "0 9 * * *") TASK="etf_yesno" ;;
              "0 10 * * 1-5") TASK="stock_fourty" ;;
              *) TASK="unknown" ;;
            esac
          else
            TASK="${{ github.event.inputs.task }}"
          fi
          echo "TASK=$TASK" >> $GITHUB_ENV
          echo "执行任务: $TASK (触发方式: $TRIGGER_TYPE)"

      - name: 创建数据目录
        run: |
          mkdir -p data/{etf_daily,flags,logs,arbitrage} && chmod -R 777 data/

      - name: 检查是否为需要跳过的任务
        id: check_skip_task
        run: |
          SKIP_TASK="false"
          if [ "$TASK" = "clean_daily_data" ] || [ "$TASK" = "clean_arbitrage_data" ] || [ "$TASK" = "clean_trade_records" ] || [ "$TASK" = "clean_numeric_csv" ] || [ "$TASK" = "show_akshare_info" ] || [ "$TASK" = "stock_fourty" ]; then
            echo "SKIP_TASK=true" >> $GITHUB_OUTPUT
          else
            echo "SKIP_TASK=false" >> $GITHUB_OUTPUT
          fi

      - name: 检查交易日（日线爬取）
        if: env.TASK == 'crawl_etf_daily' && env.TRIGGER_TYPE == 'schedule'
        id: check_trading_day
        run: |
          IS_TRADING_DAY=$(TZ=Asia/Shanghai date '+%u' | awk '$1 <= 5 {print "true"}')
          echo "IS_TRADING_DAY=${IS_TRADING_DAY:-false}" >> $GITHUB_OUTPUT
          echo "交易日检查: ${IS_TRADING_DAY:-false}"

      - name: 检查推送标志
        id: check_flags
        run: |
          BEIJING_DATE=$(TZ=Asia/Shanghai date '+%Y-%m-%d')
          if [[ "$TASK" == "calculate_position" && -f "data/flags/position_pushed_${BEIJING_DATE}.txt" ]]; then
            echo "position_pushed=true" >> $GITHUB_OUTPUT
          else
            echo "position_pushed=false" >> $GITHUB_OUTPUT
          fi

      - name: 跳过非交易日
        if: env.TASK == 'crawl_etf_daily' && env.TRIGGER_TYPE == 'schedule' && steps.check_trading_day.outputs.IS_TRADING_DAY == 'false'
        run: |
          echo "skip_execution=true" >> $GITHUB_ENV

      - name: 跳过已推送任务
        if: env.TRIGGER_TYPE == 'schedule' && steps.check_flags.outputs.position_pushed == 'true' && env.TASK == 'calculate_position'
        run: |
          echo "skip_execution=true" >> $GITHUB_ENV

      - name: 跳过特殊任务
        if: steps.check_skip_task.outputs.SKIP_TASK == 'true'
        run: |
          echo "任务 $TASK 属于特殊任务类型，将跳过执行（由通用任务流程）"
          echo "skip_execution=true" >> $GITHUB_ENV

      - name: 执行任务
        id: execute_task
        if: env.skip_execution != 'true'
        env:
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
          TZ: Asia/Shanghai
        run: |
          BEIJING_TIME=$(date '+%Y%m%d_%H%M%S')
          LOG_FILE="data/logs/task_${TASK}_${BEIJING_TIME}.log"
          echo "日志文件: $LOG_FILE"
          
          # 根据任务类型执行对应操作
          case "$TASK" in
            crawl_etf_daily)
              echo "正在执行: 日线数据爬取"
              python main.py $TASK 2>&1 | tee "$LOG_FILE"
              ;;
            update_etf_list)
              echo "正在执行: ETF列表更新"
              python main.py $TASK 2>&1 | tee "$LOG_FILE"
              ;;
            calculate_arbitrage)
              echo "正在执行: 套利计算"
              python main.py $TASK 2>&1 | tee "$LOG_FILE"
              ;;
            calculate_position)
              echo "正在执行: 仓位策略计算"
              python main.py $TASK 2>&1 | tee "$LOG_FILE"
              ;;
            etf_yesno)
              echo "正在执行: ETF Yes/No 策略"
              python ETF_YesNo.py 2>&1 | tee "$LOG_FILE"
              ;;
            *)
              echo "未知任务或特殊任务: $TASK"
              exit 1
              ;;
          esac
          
          # 记录任务状态
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "task_status=success" >> $GITHUB_OUTPUT
          else
            echo "task_status=failed" >> $GITHUB_OUTPUT
          fi
          
          [ ${PIPESTATUS[0]} -eq 0 ] || exit 1

      - name: 拉取最新代码
        if: env.skip_execution != 'true'
        run: |
          git config user.name "GitHub Actions" && git config user.email "actions@github.com"
          git pull origin main --rebase --autostash || echo "拉取代码失败"

      - name: 提交数据变更
        if: >-
          env.skip_execution != 'true' && 
          steps.execute_task.outputs.task_status == 'success' &&
          (env.TASK == 'crawl_etf_daily' || env.TASK == 'update_etf_list' || 
           env.TASK == 'calculate_arbitrage' || env.TASK == 'calculate_position')
        run: |
          git config user.name "GitHub Actions" && git config user.email "actions@github.com"
          
          case "$TASK" in
            crawl_etf_daily)
              git add data/etf_daily/ && [ -n "$(git diff --cached --name-only data/etf_daily/)" ] && 
              git commit -m "自动更新ETF日线数据 [$TRIGGER_TYPE]" && git push origin main
              ;;
            update_etf_list)
              git add data/all_etfs.csv && [ -n "$(git diff --cached --name-only data/all_etfs.csv)" ] && 
              git commit -m "自动更新ETF列表 [$TRIGGER_TYPE]" && git push origin main
              ;;
            calculate_arbitrage)
              git add data/arbitrage/ data/flags/{discount,premium}_status.json && 
              [ -n "$(git diff --cached --name-only data/arbitrage/ data/flags/)" ] && 
              git commit -m "自动更新套利数据 [$TRIGGER_TYPE]" && git push origin main
              ;;
            calculate_position)
              git add data/flags/ && [ -n "$(git diff --cached --name-only data/flags/)" ] && 
              git commit -m "自动更新策略标志文件 [$TRIGGER_TYPE]" && git push origin main
              ;;
          esac

      - name: 任务完成通知
        if: always()
        run: |
          if [ "${{ env.skip_execution }}" == "true" ]; then
            echo "任务 ${{ env.TASK }} 已跳过"
          elif [ "${{ steps.execute_task.outputs.task_status }}" == "success" ]; then
            echo "【GIT-fish-etf】[${{ env.TASK }}]执行成功"
          else
            echo "【GIT-fish-etf】[${{ env.TASK }}]执行失败"
          fi

      - name: 失败通知
        if: failure() && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"⚠️ 【GIT-fish-etf】[${{ env.TASK }}]执行失败\\n北京时间: ${BEIJING_TIME}\"}}"
          || echo "企业微信通知发送失败"

  manual-clean-daily-data:
    name: 手动清理日线数据
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'clean_daily_data'
    permissions:
      contents: write
    steps:
      - name: 显示任务信息
        run: echo "正在执行: 手动清理日线数据"
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - run: |
          pip install -r requirements.txt || echo "警告: requirements.txt 文件不存在"
      - name: 清理日线数据
        run: |
          echo "删除 data/etf_daily/*.csv"
          rm -rf data/etf_daily/*.csv
      - name: 提交清理变更
        run: |
          git config user.name "GitHub Actions" && git config user.email "actions@github.com"
          git add data/etf_daily/ && git commit -m "【手动清理】清除ETF日线数据文件" && git push origin main
      - name: 发送清理通知
        if: env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"✅ 【手动清理】ETF日线数据文件已清理完成\\n北京时间: ${BEIJING_TIME}\"}}"

  manual-clean-arbitrage-data:
    name: 手动清理套利数据
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'clean_arbitrage_data'
    permissions:
      contents: write
    steps:
      - name: 显示任务信息
        run: echo "正在执行: 手动清理套利数据"
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - run: |
          pip install -r requirements.txt || echo "警告: requirements.txt 文件不存在"
      - name: 清理套利数据
        run: |
          echo "删除 data/arbitrage/*.csv"
          rm -rf data/arbitrage/*.csv
      - name: 提交清理变更
        run: |
          git config user.name "GitHub Actions" && git config user.email "actions@github.com"
          git add data/arbitrage/ && git commit -m "【手动清理】清除套利数据文件" && git push origin main
      - name: 发送清理通知
        if: env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"✅ 【手动清理】套利数据文件已清理完成\\n北京时间: ${BEIJING_TIME}\"}}"

  manual-clean-trade-records:
    name: 手动清理交易记录
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'clean_trade_records'
    permissions:
      contents: write
    steps:
      - name: 显示任务信息
        run: echo "正在执行: 手动清理交易记录"
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - run: |
          pip install -r requirements.txt || echo "警告: requirements.txt 文件不存在"
      - name: 清理交易记录
        run: |
          echo "删除 data/trade_records.csv"
          rm -f data/trade_records.csv
      - name: 提交清理变更
        run: |
          git config user.name "GitHub Actions" && git config user.email "actions@github.com"
          git add data/trade_records.csv && git commit -m "【手动清理】清除交易记录文件" && git push origin main
      - name: 发送清理通知
        if: env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"✅ 【手动清理】交易记录文件已清理完成\\n北京时间: ${BEIJING_TIME}\"}}"

  manual-clean-numeric-csv:
    name: 手动清理纯数字CSV
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'clean_numeric_csv'
    permissions:
      contents: write
    steps:
      - name: 显示任务信息
        run: echo "正在执行: 手动清理纯数字CSV"
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - run: |
          pip install -r requirements.txt || echo "警告: requirements.txt 文件不存在"
      - name: 清理纯数字CSV
        run: |
          echo "删除纯数字CSV文件"
          find data/ -type f -name '[0-9]*.csv' -delete
      - name: 提交清理变更
        run: |
          git config user.name "GitHub Actions" && git config user.email "actions@github.com"
          git add -u data/ && git commit -m "【手动清理】清除纯数字CSV文件" && git push origin main
      - name: 发送清理通知
        if: env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"✅ 【手动清理】纯数字CSV文件已清理完成\\n北京时间: ${BEIJING_TIME}\"}}"

  show-akshare-info:
    name: 显示AkShare信息
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'show_akshare_info'
    permissions:
      contents: write
    steps:
      - name: 显示任务信息
        run: echo "正在执行: 显示AkShare信息"
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - run: |
          pip install -r requirements.txt || echo "警告: requirements.txt 文件不存在"
      - name: 获取AkShare信息
        run: |
          INTERFACE_NAME="${{ github.event.inputs.interface_name }}"
          python data_crawler/get_akshare_info.py ${INTERFACE_NAME:+$INTERFACE_NAME}
      - name: 提交信息文件
        run: |
          git config user.name "GitHub Actions" && git config user.email "actions@github.com"
          git add data/flags/*.txt && git commit -m "更新AkShare信息文件" && git push origin main
      - name: 发送完成通知
        if: env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          INTERFACE_NAME="${{ github.event.inputs.interface_name }}"
          MSG="✅ AkShare信息已生成"
          [ -n "$INTERFACE_NAME" ] && MSG="✅ 已查询AkShare接口信息: $INTERFACE_NAME"
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"$MSG\\n北京时间: ${BEIJING_TIME}\"}}"

  etf_yesno:
    name: ETF Yes/No 策略
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'etf_yesno'
    permissions:
      contents: write
    steps:
      - name: 显示任务信息
        run: echo "正在执行: ETF Yes/No 策略"
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - run: |
          pip install -r requirements.txt || echo "警告: requirements.txt 文件不存在"
      - name: 执行ETF策略
        env:
          WECOM_WEBHOOK: ${{ secrets.WECOM_ETFYESNO }}
        run: |
          mkdir -p data/logs
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y%m%d_%H%M%S')
          LOG_FILE="data/logs/etf_yesno_${BEIJING_TIME}.log"
          echo "日志文件: $LOG_FILE"
          python ETF_YesNo.py 2>&1 | tee "$LOG_FILE"
          
          # 记录任务状态
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "task_status=success" >> $GITHUB_OUTPUT
          else
            echo "task_status=failed" >> $GITHUB_OUTPUT
          fi

  stock_fourty:
    name: 个股趋势策略 (TickTen)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'stock_fourty'
    permissions:
      contents: write
    steps:
      - name: 显示任务信息
        run: echo "正在执行: 个股趋势策略 (TickTen)"
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - run: |
          pip install -r requirements.txt || echo "警告: requirements.txt 文件不存在"
      - name: 执行个股策略
        env:
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
        run: |
          mkdir -p data/logs
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y%m%d_%H%M%S')
          LOG_FILE="data/logs/stock_tickten_${BEIJING_TIME}.log"
          
          # 执行策略
          if [ -f "strategy/stock_tickten.py" ]; then
            echo "找到策略文件: strategy/stock_tickten.py"
            python strategy/stock_tickten.py 2>&1 | tee "$LOG_FILE"
          else
            echo "错误: 未找到个股趋势策略文件 stock_tickten.py"
            exit 1
          fi
          
          # 记录任务状态
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "task_status=success" >> $GITHUB_OUTPUT
          else
            echo "task_status=failed" >> $GITHUB_OUTPUT
          fi

  schedule-stock_fourty:
    name: 个股趋势策略 (TickTen) - 定时
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' && github.event.schedule == '0 10 * * 1-5'
    permissions:
      contents: write
    steps:
      - name: 显示任务信息
        run: echo "正在执行: 个股趋势策略 (TickTen) - 定时"
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - run: |
          pip install -r requirements.txt || echo "警告: requirements.txt 文件不存在"
      
      - name: 检查交易日
        id: check_trading_day
        run: |
          IS_TRADING_DAY=$(TZ=Asia/Shanghai date '+%u' | awk '$1 <= 5 {print "true"}')
          echo "IS_TRADING_DAY=${IS_TRADING_DAY:-false}" >> $GITHUB_OUTPUT
      
      - name: 检查推送标志
        id: check_flags
        run: |
          BEIJING_DATE=$(TZ=Asia/Shanghai date '+%Y-%m-%d')
          echo "stock_tickten_pushed=$( [ -f "data/flags/stock_tickten_pushed_${BEIJING_DATE}.txt" ] && echo true || echo false )" >> $GITHUB_OUTPUT
      
      - name: 跳过非交易日
        if: steps.check_trading_day.outputs.IS_TRADING_DAY == 'false'
        run: |
          echo "skip_execution=true" >> $GITHUB_ENV
      
      - name: 跳过已推送任务
        if: steps.check_flags.outputs.stock_tickten_pushed == 'true'
        run: |
          echo "skip_execution=true" >> $GITHUB_ENV
      
      - name: 执行个股策略
        id: execute_task
        if: env.skip_execution != 'true'
        env:
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
        run: |
          mkdir -p data/logs
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y%m%d_%H%M%S')
          LOG_FILE="data/logs/stock_tickten_${BEIJING_TIME}.log"
          
          # 执行策略
          if [ -f "strategy/stock_tickten.py" ]; then
            echo "找到策略文件: strategy/stock_tickten.py"
            python strategy/stock_tickten.py 2>&1 | tee "$LOG_FILE"
          else
            echo "错误: 未找到个股趋势策略文件 stock_tickten.py"
            exit 1
          fi
          
          # 记录任务状态
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "task_status=success" >> $GITHUB_OUTPUT
          else
            echo "task_status=failed" >> $GITHUB_OUTPUT
          fi
      
      - name: 创建推送标志
        if: env.skip_execution != 'true' && steps.execute_task.outputs.task_status == 'success'
        run: |
          BEIJING_DATE=$(TZ=Asia/Shanghai date '+%Y-%m-%d')
          echo "执行完成" > "data/flags/stock_tickten_pushed_${BEIJING_DATE}.txt"
          git config user.name "GitHub Actions" && git config user.email "actions@github.com"
          git add "data/flags/stock_tickten_pushed_${BEIJING_DATE}.txt"
          git commit -m "个股趋势策略已推送标志" && git push origin main
      
      - name: 发送策略通知
        if: env.skip_execution != 'true' && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          STATUS=${{ steps.execute_task.outputs.task_status }} || 'failed'
          EMOJI=${STATUS == 'success' && '✅' || '❌'}
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"$EMOJI 【个股趋势策略】执行${STATUS}\\n北京时间: ${BEIJING_TIME}\"}}"
