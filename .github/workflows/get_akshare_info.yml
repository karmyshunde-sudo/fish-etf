name: Get-akshare接口信息
on:
  workflow_dispatch:
    inputs:
      task:
        description: '任务类型'
        required: true
        type: choice
        options:
          - 'show_akshare_info'
      interface_name:
        description: '填充具体AkShare接口名称（可选）'
        required: false
        type: string
        default: ''
jobs:
  # ========================
  # 显示AkShare信息
  # ========================
  show-akshare-info:
    name: 显示AkShare信息
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'show_akshare_info'
    permissions:
      contents: write
    env:
      WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
    steps:
      - name: 验证时区设置
        run: |
          echo "时区验证: $(date -u '+%Y-%m-%d %H:%M:%S' UTC) | $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S' CST)"

      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 配置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: 安装依赖包
        run: |
          echo "当前工作目录: $(pwd)"
          # 检查 requirements.txt 是否存在
          if [ -f "requirements.txt" ]; then
            echo "✅ requirements.txt 文件存在，开始安装依赖..."
            pip install --upgrade pip
            pip install -r requirements.txt
            
            # 验证 akshare 是否安装成功
            if ! python -c "import akshare; print('akshare 版本:', akshare.__version__)"; then
              echo "❌ akshare 未正确安装，尝试单独安装..."
              pip install akshare
            fi
            # 再次验证
            if ! python -c "import akshare"; then
              echo "❌ akshare 安装失败"
              exit 1
            fi
          else
            echo "❌ 错误: requirements.txt 文件不存在"
            ls -la
            exit 1
          fi
      
      - name: 获取AkShare信息
        run: |
          INTERFACE_NAME="${{ github.event.inputs.interface_name }}"
          echo "正在获取AkShare信息: ${INTERFACE_NAME:-默认接口}"
          
          # 执行获取信息
          python data_crawler/get_akshare_info.py ${INTERFACE_NAME:+$INTERFACE_NAME}
      
      - name: 检查文件状态（诊断）
        run: |
          echo "检查 data/flags/ 目录状态:"
          ls -la data/flags/ 2>/dev/null || echo "目录不存在"
          echo "文件内容预览:"
          head -n 3 data/flags/*.txt 2>/dev/null || echo "无标志文件或为空"
      
      - name: 发送完成通知
        if: success()
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          MSG="✅ 【AkShare信息】获取成功"
          [ -n "${{ github.event.inputs.interface_name }}" ] && MSG="✅ 【AkShare信息】已查询接口: ${{ github.event.inputs.interface_name }}"
          if [ -z "$WECOM_WEBHOOK" ]; then
            echo "⚠️ WECOM_WEBHOOK 环境变量未设置，跳过发送通知"
          else
            curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
              -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"$MSG\\n北京时间: ${BEIJING_TIME}\"}}"
          fi
      
      - name: 发送失败通知
        if: failure()
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          if [ -z "$WECOM_WEBHOOK" ]; then
            echo "⚠️ WECOM_WEBHOOK 环境变量未设置，跳过发送通知"
          else
            curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
              -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"❌ 【AkShare信息】执行失败\\n北京时间: ${BEIJING_TIME}\"}}"
          fi
