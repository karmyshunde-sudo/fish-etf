name: 1-定时-股票任务
on:
  schedule:
    - cron: '*/10 14-23 * * *'    # UTC 14:00 = 北京时间 22:00-07:00 (股票日线爬取)
    - cron: '50 0 * * 1-5'        # UTC 0:50 = 北京时间 8:50 (个股趋势策略)
    - cron: '10 0 * * 1-5'        # UTC 0:10 = 北京时间 8:10 (MACD均线策略)

jobs:
  # ========================
  # 股票日线数据爬取（定时）
  # ========================
  stock-crawler-schedule:
    name: 股票日线数据爬取（定时）
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' && (github.event.schedule == '*/10 14-23 * * *')
    permissions:
      contents: write
    steps:
      - name: 验证时区设置
        run: |
          echo "时区验证: $(date -u '+%Y-%m-%d %H:%M:%S' UTC) | $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S' CST)"
      
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 配置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: 安装依赖包
        run: |
          echo "当前工作目录: $(pwd)"
          if [ -f "requirements.txt" ]; then
            echo "✅ requirements.txt 文件存在，开始安装依赖..."
            pip install -r requirements.txt
          else
            echo "❌ 错误: requirements.txt 文件不存在"
            ls -la
            exit 1
          fi
      
      - name: 创建数据目录
        run: |
          mkdir -p data/{daily,flags,logs} && chmod -R 777 data/
      
      - name: 执行股票日线数据爬取（定时）
        id: execute_task
        env:
          WECOM_WEBHOOK: ${{ secrets.STOCK_WEBHOOK }}
          TZ: Asia/Shanghai
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y%m%d_%H%M%S')
          LOG_FILE="data/logs/stock_crawler_${BEIJING_TIME}.log"
          echo "正在执行: 股票日线数据爬取（定时）"
          echo "日志文件: $LOG_FILE"
          
          if [ -f "stock/crawler.py" ]; then
            echo "找到爬取文件: stock/crawler.py"
            python -m stock.crawler 2>&1 | tee "$LOG_FILE"
          else
            echo "错误: 未找到股票爬取文件 stock/crawler.py"
            exit 1
          fi
          
          # 记录任务状态
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "task_status=success" >> $GITHUB_OUTPUT
          else
            echo "task_status=failed" >> $GITHUB_OUTPUT
          fi
      
      - name: 提交更新的数据
        if: steps.execute_task.outputs.task_status == 'success'
        run: |
          git config user.name "GitHub Actions" && git config user.email "actions@github.com"
          git add data/daily/ data/all_stocks.csv
          if [ -n "$(git diff --cached --name-only data/daily/ data/all_stocks.csv)" ]; then
            git commit -m "自动更新股票日线数据 [定时]" && git push origin main
          else
            echo "没有数据变化，无需提交"
          fi
      
      - name: 发送完成通知
        if: steps.execute_task.outputs.task_status == 'success' && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          # 检查是否有新提交
          HAS_NEW_COMMITS=$(git log -1 --since="1 hour ago" -- data/daily/ | wc -l)
          
          if [ "$HAS_NEW_COMMITS" -gt 0 ]; then
            MSG="✅ 【股票日线数据爬取（定时）】执行成功并已提交"
          else
            MSG="⚠️ 【股票日线数据爬取（定时）】执行成功但无新提交（可能数据无变化）"
          fi
          
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"$MSG\\n北京时间: ${BEIJING_TIME}\"}}"
      
      - name: 发送失败通知
        if: failure() && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"❌ 【股票日线数据爬取（定时）】执行失败\\n北京时间: ${BEIJING_TIME}\"}}"

  # ========================
  # 个股趋势策略 (TickTen) - 定时
  # ========================
  stock-fourty-schedule:
    name: 个股趋势策略 (TickTen) - 定时
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' && (github.event.schedule == '50 0 * * 1-5')
    permissions:
      contents: write
    steps:
      - name: 验证时区设置
        run: |
          echo "时区验证: $(date -u '+%Y-%m-%d %H:%M:%S' UTC) | $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S' CST)"
      
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 配置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: 安装依赖包
        run: |
          echo "当前工作目录: $(pwd)"
          if [ -f "requirements.txt" ]; then
            echo "✅ requirements.txt 文件存在，开始安装依赖..."
            pip install -r requirements.txt
          else
            echo "❌ 错误: requirements.txt 文件不存在"
            ls -la
            exit 1
          fi
      
      - name: 创建数据目录
        run: |
          mkdir -p data/{flags,logs} && chmod -R 777 data/
      
      - name: 检查推送标志（定时）
        id: check_flags
        run: |
          BEIJING_DATE=$(TZ=Asia/Shanghai date '+%Y-%m-%d')
          echo "stock_tickten_pushed=$( [ -f "data/flags/stock_tickten_pushed_${BEIJING_DATE}.txt" ] && echo true || echo false )" >> $GITHUB_OUTPUT
      
      - name: 跳过已推送任务（定时）
        if: steps.check_flags.outputs.stock_tickten_pushed == 'true'
        run: |
          echo "skip_execution=true" >> $GITHUB_ENV
      
      - name: 执行个股趋势策略（定时）
        id: execute_task
        if: env.skip_execution != 'true'
        env:
          WECOM_WEBHOOK: ${{ secrets.STOCK_WEBHOOK }}
          TZ: Asia/Shanghai
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y%m%d_%H%M%S')
          LOG_FILE="data/logs/stock_tickten_${BEIJING_TIME}.log"
          echo "正在执行: 个股趋势策略 (TickTen)（定时）"
          echo "日志文件: $LOG_FILE"
          
          if [ -f "stock/tickten.py" ]; then
            echo "找到策略文件: stock/tickten.py"
            python -m stock.tickten 2>&1 | tee "$LOG_FILE"
          else
            echo "错误: 未找到个股趋势策略文件 stock/tickten.py"
            exit 1
          fi
          
          # 记录任务状态
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "task_status=success" >> $GITHUB_OUTPUT
          else
            echo "task_status=failed" >> $GITHUB_OUTPUT
          fi
      
      - name: 创建推送标志
        if: env.skip_execution != 'true' && steps.execute_task.outputs.task_status == 'success'
        run: |
          BEIJING_DATE=$(TZ=Asia/Shanghai date '+%Y-%m-%d')
          echo "执行完成" > "data/flags/stock_tickten_pushed_${BEIJING_DATE}.txt"
          git config user.name "GitHub Actions" && git config user.email "actions@github.com"
          git add "data/flags/stock_tickten_pushed_${BEIJING_DATE}.txt" data/all_stocks.csv
          git commit -m "个股趋势策略已推送标志 [定时]" && git push origin main
      
      - name: 发送完成通知
        if: steps.execute_task.outputs.task_status == 'success' && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          # 检查是否有新提交
          HAS_NEW_COMMITS=$(git log -1 --since="1 hour ago" -- data/flags/stock_tickten_pushed_${BEIJING_DATE}.txt data/all_stocks.csv | wc -l)
          
          if [ "$HAS_NEW_COMMITS" -gt 0 ]; then
            MSG="✅ 【个股趋势策略（定时）】执行成功并提交"
          else
            MSG="ℹ️ 【个股趋势策略（定时）】执行成功但无新提交（可能数据无变化）"
          fi
          
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"$MSG\\n北京时间: ${BEIJING_TIME}\"}}"
      
      - name: 发送失败通知
        if: failure() && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"❌ 【个股趋势策略（定时）】执行失败\\n北京时间: ${BEIJING_TIME}\"}}"

  # ========================
  # MACD均线策略 - 定时
  # ========================
  macd-ma-strategy-schedule:
    name: MACD均线策略 - 定时
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' && (github.event.schedule == '10 0 * * 1-5')
    permissions:
      contents: write
    steps:
      - name: 验证时区设置
        run: |
          echo "时区验证: $(date -u '+%Y-%m-%d %H:%M:%S' UTC) | $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S' CST)"
      
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 配置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: 安装依赖包
        run: |
          echo "当前工作目录: $(pwd)"
          if [ -f "requirements.txt" ]; then
            echo "✅ requirements.txt 文件存在，开始安装依赖..."
            pip install -r requirements.txt
          else
            echo "❌ 错误: requirements.txt 文件不存在"
            ls -la
            exit 1
          fi
      
      - name: 创建数据目录
        run: |
          mkdir -p data/{flags,logs} && chmod -R 777 data/
      
      - name: 检查推送标志（定时）
        id: check_flags
        run: |
          BEIJING_DATE=$(TZ=Asia/Shanghai date '+%Y-%m-%d')
          echo "macd_ma_pushed=$( [ -f "data/flags/macd_ma_pushed_${BEIJING_DATE}.txt" ] && echo true || echo false )" >> $GITHUB_OUTPUT
      
      - name: 跳过已推送任务（定时）
        if: steps.check_flags.outputs.macd_ma_pushed == 'true'
        run: |
          echo "skip_execution=true" >> $GITHUB_ENV
      
      - name: 执行MACD均线策略（定时）
        id: execute_task
        if: env.skip_execution != 'true'
        env:
          WECOM_WEBHOOK: ${{ secrets.STOCK_WEBHOOK }}
          TZ: Asia/Shanghai
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y%m%d_%H%M%S')
          LOG_FILE="data/logs/macd_ma_strategy_${BEIJING_TIME}.log"
          echo "正在执行: MACD均线策略（定时）"
          echo "日志文件: $LOG_FILE"
          
          if [ -f "stock/macd_ma_strategy.py" ]; then
            echo "找到策略文件: stock/macd_ma_strategy.py"
            python -m stock.macd_ma_strategy 2>&1 | tee "$LOG_FILE"
          else
            echo "错误: 未找到MACD均线策略文件 stock/macd_ma_strategy.py"
            exit 1
          fi
          
          # 记录任务状态
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "task_status=success" >> $GITHUB_OUTPUT
          else
            echo "task_status=failed" >> $GITHUB_OUTPUT
          fi
      
      - name: 创建推送标志
        if: env.skip_execution != 'true' && steps.execute_task.outputs.task_status == 'success'
        run: |
          BEIJING_DATE=$(TZ=Asia/Shanghai date '+%Y-%m-%d')
          echo "执行完成" > "data/flags/macd_ma_pushed_${BEIJING_DATE}.txt"
          git config user.name "GitHub Actions" && git config user.email "actions@github.com"
          git add "data/flags/macd_ma_pushed_${BEIJING_DATE}.txt"
          git commit -m "MACD均线策略已推送 [定时]" && git push origin main
      
      - name: 发送完成通知
        if: steps.execute_task.outputs.task_status == 'success' && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          # 检查是否有新提交
          HAS_NEW_COMMITS=$(git log -1 --since="1 hour ago" -- data/flags/macd_ma_pushed_${BEIJING_DATE}.txt | wc -l)
          
          if [ "$HAS_NEW_COMMITS" -gt 0 ]; then
            MSG="✅ 【MACD均线策略（定时）】执行成功并已提交"
          else
            MSG="⚠️ 【MACD均线策略（定时）】执行成功但无新提交（可能数据无变化）"
          fi
          
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"$MSG\\n北京时间: ${BEIJING_TIME}\"}}"
      
      - name: 发送失败通知
        if: failure() && env.WECOM_WEBHOOK
        run: |
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          curl -s -X POST "$WECOM_WEBHOOK" -H "Content-Type: application/json" \
            -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"❌ 【MACD均线策略（定时）】执行失败\\n北京时间: ${BEIJING_TIME}\"}}"
